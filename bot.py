# -*- coding: utf-8 -*-
# BOT2 ‚Äî Veo/MJ/Banana/PM ‚Äî PTB 21.x
# –í–µ—Ä—Å–∏—è: 2025-09-13 (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –ø–æ –ø—Ä–∞–≤–∫–∞–º)
#
# –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏:
# ‚Ä¢ –ë–∞–ª–∞–Ω—Å –≤ Redis (REDIS_URL), 10 —Ç–æ–∫–µ–Ω–æ–≤ –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
# ‚Ä¢ –¶–µ–Ω—ã: VEO Fast=50, VEO Quality=150, MJ=15, Banana=5
# ‚Ä¢ Stars –ø–∞–∫–µ—Ç—ã —Å –±–æ–Ω—É—Å–∞–º–∏: 50‚Üí50, 100‚Üí110, 200‚Üí220, 300‚Üí330, 400‚Üí440, 500‚Üí550
# ‚Ä¢ VEO –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π üß† Prompt-Master (–ø—Ä—è–º–æ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ)
# ‚Ä¢ Prompt-Master (OpenAI 1.x + –æ—Ñ–ª–∞–π–Ω-fallback). –†—É—Å—Å–∫–∞—è –æ–∑–≤—É—á–∫–∞ ‚Äî –¥–∏–∞–ª–æ–≥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, Lip-sync –ø–æ–¥ RU
# ‚Ä¢ MJ: –∫–Ω–æ–ø–∫–∞ ¬´‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ¬ª + ¬´üèôÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å 16:9¬ª, –∞–Ω—Ç–∏-—Å–ø–∞–º ‚Äú–†–∏—Å—É—é‚Ä¶‚Äù ‚â• 40 —Å–µ–∫, —Ä–µ—Ñ–∞–Ω–¥ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
# ‚Ä¢ Banana: ¬´—Å–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ç–æ (–¥–æ 4) ‚Üí –ø–æ—Ç–æ–º –ø—Ä–æ–º–ø—Ç ‚Üí –∫–Ω–æ–ø–∫–∞ –ó–∞–ø—É—Å–∫¬ª, –ø–æ–Ω—è—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏, —Ä–µ—Ñ–∞–Ω–¥ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
# ‚Ä¢ VEO: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ fast/quality, —Ä–µ—Ñ–∞–Ω–¥ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö/—Ç–∞–π–º–∞—É—Ç–µ
# ‚Ä¢ Invoice XTR (Stars) + —É—Å–ø–µ—à–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
# ‚Ä¢ FAQ –æ–±–Ω–æ–≤–ª—ë–Ω, –±–∞–ª–∞–Ω—Å –≤ welcome –∂–∏—Ä–Ω—ã–º

import os, json, time, uuid, asyncio, logging, tempfile, re
from typing import Dict, Any, List, Tuple, Optional

import requests
import redis
from dotenv import load_dotenv

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    InputFile, InputMediaPhoto, LabeledPrice
)
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler,
    CallbackQueryHandler, filters, AIORateLimiter, PreCheckoutQueryHandler
)

# ===== KIE NanoBanana (–≤–Ω–µ—à–Ω–∏–π –º–æ–¥—É–ª—å)
from kie_banana import create_banana_task, get_banana_status

# ==========================
#   ENV / INIT
# ==========================
load_dotenv()

def _env(k: str, d: str = "") -> str:
    v = os.getenv(k)
    return (v if v is not None else d).strip()

TELEGRAM_TOKEN = _env("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is not set")

REDIS_URL = _env("REDIS_URL")
if not REDIS_URL:
    raise RuntimeError("REDIS_URL is not set (–Ω—É–∂–µ–Ω –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞)")

# –ö–∞–Ω–∞–ª—ã/—Å—Å—ã–ª–∫–∏
PROMPTS_CHANNEL_URL = _env("PROMPTS_CHANNEL_URL", "https://t.me/bestveo3promts")
STARS_BUY_URL       = _env("STARS_BUY_URL", "https://t.me/PremiumBot")

# ---- KIE –æ–±—â–∏–µ (VEO/MJ ‚Äî –≤–∞—à–∏ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã/–∫–ª—é—á–∏)
KIE_API_KEY         = _env("KIE_API_KEY")
KIE_BASE_URL        = _env("KIE_BASE_URL", "https://api.kie.ai")
# VEO
KIE_VEO_GEN_PATH    = _env("KIE_VEO_GEN_PATH",    "/api/v1/veo/generate")
KIE_VEO_STATUS_PATH = _env("KIE_VEO_STATUS_PATH", "/api/v1/veo/record-info")
KIE_VEO_1080_PATH   = _env("KIE_VEO_1080_PATH",   "/api/v1/veo/get-1080p-video")
# MJ
KIE_MJ_GENERATE     = _env("KIE_MJ_GENERATE",     "/api/v1/mj/generate")
KIE_MJ_STATUS       = _env("KIE_MJ_STATUS",       "/api/v1/mj/record-info")

# Upload (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–≤–æ–π –∞–ø–ª–æ–∞–¥–µ—Ä ‚Äî –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)
UPLOAD_BASE_URL     = _env("UPLOAD_BASE_URL")
UPLOAD_STREAM_PATH  = _env("UPLOAD_STREAM_PATH", "/api/file-stream-upload")

# OpenAI (Prompt-Master)
OPENAI_API_KEY  = _env("OPENAI_API_KEY")      # –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ ‚Äî –æ—Ñ–ª–∞–π–Ω —à–∞–±–ª–æ–Ω
OPENAI_API_BASE = _env("OPENAI_API_BASE")     # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (–µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏/—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π endpoint)

try:
    from openai import OpenAI
    _oai_client = OpenAI(api_key=OPENAI_API_KEY, base_url=OPENAI_API_BASE or None) if OPENAI_API_KEY else None
except Exception:
    _oai_client = None

# Redis (–±–∞–ª–∞–Ω—Å—ã)
rdb = redis.from_url(REDIS_URL, decode_responses=True)

# –õ–æ–≥–∏
LOG_LEVEL = _env("LOG_LEVEL", "INFO").upper()
logging.basicConfig(level=LOG_LEVEL, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
log = logging.getLogger("bot2")

# ==========================
#   Prices & Tokens
# ==========================
TOKEN_COSTS = {
    "veo_fast": 50,
    "veo_quality": 150,
    "veo_photo": 50,
    "mj": 15,
    "banana": 5,
}
STARS_PACKS: Dict[int, int] = {50: 50, 100: 110, 200: 220, 300: 330, 400: 440, 500: 550}

def tokens_for_stars(stars: int) -> int:
    return int(STARS_PACKS.get(int(stars), 0))

# ==========================
#   Balance utils (Redis)
# ==========================
def bal_key(uid: int) -> str:
    return f"bal:{uid}"

def get_balance(uid: int) -> int:
    try:
        return int(rdb.get(bal_key(uid)) or 0)
    except Exception:
        return 0

def set_balance(uid: int, v: int):
    rdb.set(bal_key(uid), max(0, int(v)))

def add_tokens(uid: int, add: int):
    set_balance(uid, get_balance(uid) + int(add))

def try_charge(uid: int, need: int) -> Tuple[bool, int]:
    bal = get_balance(uid)
    if bal < need:
        return False, bal
    set_balance(uid, bal - need)
    return True, bal - need

# ==========================
#   UI
# ==========================
WELCOME = (
    "üé¨ Veo 3 ‚Äî —Å—ä—ë–º–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: –æ–ø–∏—à–∏ –∏–¥–µ—é –∏ –ø–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—ã–π –∫–ª–∏–ø!\n"
    "üñåÔ∏è MJ ‚Äî —Ö—É–¥–æ–∂–Ω–∏–∫: –Ω–∞—Ä–∏—Å—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ç–≤–æ–µ–º—É —Ç–µ–∫—Å—Ç—É.\n"
    "üçå Banana ‚Äî –†–µ–¥–∞–∫—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –±—É–¥—É—â–µ–≥–æ\n"
    "üß† Prompt-Master ‚Äî –≤–µ—Ä–Ω—ë—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–∏–Ω–æ–ø—Ä–æ–º–ø—Ç.\n"
    "üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç ‚Äî –æ–±—â–µ–Ω–∏–µ —Å –ò–ò.\n"
    "üíé –í–∞—à –±–∞–ª–∞–Ω—Å: *{balance}*\n"
    "üìà –ë–æ–ª—å—à–µ –∏–¥–µ–π –∏ –ø—Ä–∏–º–µ—Ä–æ–≤: {prompts_url}\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º üëá"
)

def main_menu_kb() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton("üé¨ VEO Fast  üíé50",     callback_data="mode:veo_fast")],
        [InlineKeyboardButton("üé¨ VEO Quality  üíé150",  callback_data="mode:veo_quality")],
        [InlineKeyboardButton("üñºÔ∏è MJ  üíé15",           callback_data="mode:mj")],
        [InlineKeyboardButton("üçå Banana  üíé5",        callback_data="mode:banana")],
        [InlineKeyboardButton("üì∏ –û–∂–∏–≤–∏—Ç—å —Ñ–æ—Ç–æ (VEO) üíé50", callback_data="mode:veo_photo")],
        [InlineKeyboardButton("üß† Prompt-Master",      callback_data="mode:prompt_master")],
        [InlineKeyboardButton("üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)", callback_data="mode:chat")],
        [
            InlineKeyboardButton("‚ùì FAQ", callback_data="faq"),
            InlineKeyboardButton("üìà –ö–∞–Ω–∞–ª —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏", url=PROMPTS_CHANNEL_URL),
        ],
        [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup_open")],
    ]
    return InlineKeyboardMarkup(rows)

def stars_topup_kb() -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    for stars in [50, 100, 200, 300, 400, 500]:
        tokens = tokens_for_stars(stars)
        rows.append([InlineKeyboardButton(f"‚≠ê {stars} ‚Üí üíé {tokens}", callback_data=f"buy:stars:{stars}")])
    rows.append([InlineKeyboardButton("üõí –ì–¥–µ –∫—É–ø–∏—Ç—å Stars", url=STARS_BUY_URL)])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(rows)

# ---------- –ö–∞—Ä—Ç–æ—á–∫–∞ VEO ----------
def aspect_row(current: str) -> List[InlineKeyboardButton]:
    if current == "9:16":
        return [InlineKeyboardButton("16:9", callback_data="aspect:16:9"),
                InlineKeyboardButton("9:16 ‚úÖ", callback_data="aspect:9:16")]
    return [InlineKeyboardButton("16:9 ‚úÖ", callback_data="aspect:16:9"),
            InlineKeyboardButton("9:16",     callback_data="aspect:9:16")]

def model_row(current: str) -> List[InlineKeyboardButton]:
    if current == "veo3":
        return [InlineKeyboardButton("‚ö° Fast",       callback_data="model:veo3_fast"),
                InlineKeyboardButton("üíé Quality ‚úÖ", callback_data="model:veo3")]
    return [InlineKeyboardButton("‚ö° Fast ‚úÖ", callback_data="model:veo3_fast"),
            InlineKeyboardButton("üíé Quality", callback_data="model:veo3")]

def build_card_text_veo(s: Dict[str, Any], bal: int) -> str:
    prompt_preview = (s.get("last_prompt") or "").strip()
    if len(prompt_preview) > 900: prompt_preview = prompt_preview[:900] + "‚Ä¶"
    has_prompt = "–µ—Å—Ç—å" if s.get("last_prompt") else "–Ω–µ—Ç"
    has_ref = "–µ—Å—Ç—å" if s.get("last_image_url") else "–Ω–µ—Ç"
    model = "Fast" if s.get("model") == "veo3_fast" else ("Quality" if s.get("model") else "‚Äî")
    price = TOKEN_COSTS['veo_quality'] if s.get('model') == 'veo3' else TOKEN_COSTS['veo_fast']
    lines = [
        "üé¨ *–ö–∞—Ä—Ç–æ—á–∫–∞ VEO*",
        "",
        "‚úçÔ∏è *–ü—Ä–æ–º–ø—Ç:*",
        f"`{prompt_preview or '‚Äî'}`",
        "",
        "üß© *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*",
        f"‚Ä¢ –§–æ—Ä–º–∞—Ç: *{s.get('aspect') or '‚Äî'}*",
        f"‚Ä¢ –ú–æ–¥–µ–ª—å: *{model}*",
        f"‚Ä¢ –ü—Ä–æ–º–ø—Ç: *{has_prompt}*",
        f"‚Ä¢ –§–æ—Ç–æ-—Ä–µ—Ñ: *{has_ref}*",
        "",
        f"üíé *–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞:* {price}",
        f"üíº –ë–∞–ª–∞–Ω—Å: *{bal}*",
    ]
    return "\n".join(lines)

def card_keyboard_veo(s: Dict[str, Any]) -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    rows.append([InlineKeyboardButton("üñºÔ∏è –î–æ–±–∞–≤–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="card:toggle_photo"),
                 InlineKeyboardButton("‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç",       callback_data="card:edit_prompt")])
    # –ö–Ω–æ–ø–∫–∞ Prompt-Master –ø—Ä—è–º–æ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
    rows.append([InlineKeyboardButton("üß† Prompt-Master (–ø–æ–º–æ—á—å —Å —Ç–µ–∫—Å—Ç–æ–º)", callback_data="card:prompt_master")])
    rows.append(aspect_row(s.get("aspect") or "16:9"))
    rows.append(model_row(s.get("model") or "veo3_fast"))
    rows.append([InlineKeyboardButton("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="card:generate")])
    rows.append([InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="card:reset"),
                 InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥",         callback_data="back")])
    rows.append([InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup_open")])
    return InlineKeyboardMarkup(rows)

def banana_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="banana:add_photo")],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="banana:reset")],
        [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Banana", callback_data="banana:start")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

def mj_start_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ (–ø—Ä–æ–º–ø—Ç)", callback_data="mj:add_prompt")],
        [InlineKeyboardButton("üèôÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å 16:9", callback_data="mj:ar:16:9")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ])

# ==========================
#   State helpers (–≤ –ø–∞–º—è—Ç–∏ PTB ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—á–µ–Ω–∏—è —Å–µ–∞–Ω—Å–∞)
#   –í–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–±–∞–ª–∞–Ω—Å) ‚Äî –≤ Redis.
# ==========================
DEFAULT_STATE = {
    "mode": None,
    "aspect": "16:9",
    "model": "veo3_fast",
    "last_prompt": None,
    "last_image_url": None,
    "last_task_id": None,
    "last_result_url": None,
    "mj_wait_ts": 0.0,           # –∞–Ω—Ç–∏-—Å–ø–∞–º ¬´–†–∏—Å—É—é‚Ä¶¬ª —Ä–∞–∑ –≤ ‚â•40 —Å–µ–∫
    # Banana
    "banana_mode": False,
    "banana_photos": [],
    "banana_prompt": None,
    # PM –≤–æ–∑–≤—Ä–∞—Ç
    "pm_return_to": None,
}

def S(ctx: ContextTypes.DEFAULT_TYPE) -> Dict[str, Any]:
    ud = ctx.user_data
    for k, v in DEFAULT_STATE.items():
        ud.setdefault(k, v if not isinstance(v, list) else list(v))
    return ud

# ==========================
#   HTTP helpers (KIE)
# ==========================
def _kie_headers_json() -> Dict[str, str]:
    h = {"Content-Type": "application/json"}
    tok = (KIE_API_KEY or "").strip()
    if tok and not tok.lower().startswith("bearer "):
        tok = f"Bearer {tok}"
    if tok: h["Authorization"] = tok
    return h

def _post_json(url: str, payload: Dict[str, Any], timeout: int = 40) -> Tuple[int, Dict[str, Any]]:
    r = requests.post(url, json=payload, headers=_kie_headers_json(), timeout=timeout)
    try:
        return r.status_code, r.json()
    except Exception:
        return r.status_code, {"error": r.text}

def _get_json(url: str, params: Dict[str, Any], timeout: int = 40) -> Tuple[int, Dict[str, Any]]:
    r = requests.get(url, params=params, headers=_kie_headers_json(), timeout=timeout)
    try:
        return r.status_code, r.json()
    except Exception:
        return r.status_code, {"error": r.text}

def join_url(base: str, path: str) -> str:
    u = f"{base.rstrip('/')}/{path.lstrip('/')}"
    return u.replace("://", "¬ß¬ß").replace("//", "/").replace("¬ß¬ß", "://")

# ==========================
#   VEO
# ==========================
def _build_payload_for_veo(prompt: str, aspect: str, image_url: Optional[str], model_key: str) -> Dict[str, Any]:
    payload: Dict[str, Any] = {
        "prompt": prompt,
        "aspectRatio": "9:16" if aspect == "9:16" else "16:9",
        "model": "veo3" if model_key == "veo3" else "veo3_fast",
        "enableFallback": aspect == "16:9",
    }
    if image_url: payload["imageUrls"] = [image_url]
    return payload

def submit_kie_veo(prompt: str, aspect: str, image_url: Optional[str], model_key: str) -> Tuple[bool, Optional[str], str]:
    payload = _build_payload_for_veo(prompt, aspect, image_url, model_key)
    status, j = _post_json(join_url(KIE_BASE_URL, KIE_VEO_GEN_PATH), payload)
    code = j.get("code", status)
    if status == 200 and code == 200:
        data = j.get("data") or j
        tid = (data.get("taskId") or data.get("taskid") or data.get("id"))
        if tid: return True, str(tid), "ok"
        return False, None, "–û—Ç–≤–µ—Ç –±–µ–∑ taskId."
    return False, None, j.get("msg") or j.get("message") or j.get("error") or f"HTTP {status}"

def get_kie_veo_status(task_id: str) -> Tuple[bool, Optional[str], Optional[str]]:
    status, j = _get_json(join_url(KIE_BASE_URL, KIE_VEO_STATUS_PATH), {"taskId": task_id})
    code = j.get("code", status)
    if status == 200 and code == 200:
        data = j.get("data") or {}
        state = str(data.get("state") or "").lower() or None
        # –ø–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å —Å—Å—ã–ª–∫—É
        res = None
        for key in ("resultJson", "resultInfoJson"):
            if isinstance(data.get(key), str):
                try:
                    d = json.loads(data[key])
                    urls = d.get("resultUrls") or d.get("videoUrls") or []
                    if urls and isinstance(urls, list):
                        res = urls[0]; break
                except Exception:
                    pass
            elif isinstance(data.get(key), dict):
                d = data[key]; urls = d.get("resultUrls") or d.get("videoUrls") or []
                if urls and isinstance(urls, list):
                    res = urls[0]; break
        return True, state, res
    return False, None, j.get("msg") or j.get("message") or j.get("error") or f"HTTP {status}"

async def try_get_1080_url(task_id: str) -> Optional[str]:
    try:
        status, j = _get_json(join_url(KIE_BASE_URL, KIE_VEO_1080_PATH), {"taskId": task_id}, timeout=20)
        code = j.get("code", status)
        if status == 200 and code == 200:
            data = j.get("data") or {}
            u = (data.get("url") or data.get("downloadUrl"))
            if u: return u
    except Exception:
        pass
    return None

# ==========================
#   MJ
# ==========================
def mj_generate(prompt: str, ar: str) -> Tuple[bool, Optional[str], str]:
    payload = {
        "taskType": "mj_txt2img",
        "prompt": prompt,
        "speed": "turbo",
        "aspectRatio": "16:9",
        "version": "7",
        "enableTranslation": True,
    }
    status, j = _post_json(join_url(KIE_BASE_URL, KIE_MJ_GENERATE), payload)
    code = j.get("code", status)
    if status == 200 and code == 200:
        data = j.get("data") or j
        tid = (data.get("taskId") or data.get("taskid") or data.get("id"))
        if tid: return True, str(tid), "ok"
        return False, None, "–û—Ç–≤–µ—Ç –±–µ–∑ taskId."
    return False, None, j.get("msg") or j.get("message") or j.get("error") or f"HTTP {status}"

def mj_status(task_id: str) -> Tuple[bool, Optional[int], Optional[Dict[str, Any]]]:
    status, j = _get_json(join_url(KIE_BASE_URL, KIE_MJ_STATUS), {"taskId": task_id})
    code = j.get("code", status)
    if status == 200 and code == 200:
        data = j.get("data") or {}
        try:
            flag = int(data.get("successFlag"))
        except Exception:
            flag = None
        return True, flag, data
    return False, None, None

def _extract_mj_image_urls(status_data: Dict[str, Any]) -> List[str]:
    res = []
    rj = status_data.get("resultInfoJson") or {}
    arr = rj.get("resultUrls") or []
    if isinstance(arr, list):
        for u in arr:
            if isinstance(u, str) and u.startswith("http"):
                res.append(u)
    elif isinstance(arr, str):
        try:
            ll = json.loads(arr)
            for u in ll:
                if isinstance(u, str) and u.startswith("http"): res.append(u)
        except Exception:
            pass
    return res

# ==========================
#   Prompt-Master
# ==========================
async def oai_prompt_master(idea_text: str) -> Optional[str]:
    """
    Prompt-Master —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–π –æ–∑–≤—É—á–∫–∏:
    ‚Äî –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è "–æ–∑–≤—É—á–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º" ‚Äî Dialogue –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º,
      Lip-sync —Ç—Ä–µ–±—É–µ—Ç –ø–æ–º–µ—Ç–∫—É –¥–ª—è RU, Audio ‚Äî Russian voiceover.
    ‚Äî –†–µ–ø–ª–∏–∫–∏ –≤ –∫–∞–≤—ã—á–∫–∞—Ö –∏–ª–∏ –ø–æ—Å–ª–µ –º–∞—Ä–∫–µ—Ä–æ–≤ (–û–∑–≤—É—á–∫–∞:/VO:) –ø–æ–ø–∞–¥–∞—é—Ç –≤ Dialogue –∫–∞–∫ –µ—Å—Ç—å.
    ‚Äî –ï—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –æ—Ñ–ª–∞–π–Ω-—à–∞–±–ª–æ–Ω.
    """
    txt = (idea_text or "").strip()
    if not txt:
        return None

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞/–æ–∑–≤—É—á–∫–∏
    quoted = re.findall(r"‚Äú([^‚Äù]+)‚Äù|\"([^\"]+)\"", txt)
    quoted_dialogue = "; ".join([a or b for (a, b) in quoted if (a or b)]).strip()
    vo_match = re.search(r"(?:–æ–∑–≤—É—á–∫–∞|–æ–∑–≤—É—á–∏—Ç—å|–≥–æ–ª–æ—Å|–¥–∏–∫—Ç–æ—Ä|voiceover|vo)\s*:?\s*(.+)", txt, flags=re.I)
    marker_dialogue = (vo_match.group(1).strip() if vo_match else "")
    is_ru_vo = bool(re.search(r"–Ω–∞\s+—Ä—É—Å—Å–∫–æ–º|russian\s+(?:voice|voiceover|audio)|—Ä—É—Å—Å–∫–∞—è\s+–æ–∑–≤—É—á–∫–∞", txt, re.I))
    dialogue_text = (quoted_dialogue or marker_dialogue).strip()

    text_wo_dialogue = txt
    if quoted:
        text_wo_dialogue = re.sub(r"‚Äú[^‚Äù]+‚Äù|\"[^\"]+\"", "", text_wo_dialogue)
    if vo_match:
        text_wo_dialogue = text_wo_dialogue.replace(vo_match.group(0), "")
    text_wo_dialogue = text_wo_dialogue.strip()

    # 1) –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ OpenAI
    if _oai_client is not None:
        system = (
            "You are a Prompt-Master for cinematic AI video generation (Veo-style). "
            "Return ONE multi-line prompt in ENGLISH using EXACT labels and order:\n"
            "High-quality cinematic 4K video (16:9).\n"
            "Scene: ...\nCamera: ...\nAction: ...\nDialogue: ...\nLip-sync: ...\nAudio: ...\n"
            "Lighting: ...\nWardrobe/props: ...\nFraming: ...\n"
            "Constraints: No subtitles. No on-screen text. No logos.\n\n"
            "Rules: Keep 16:9, be specific (600‚Äì1100 chars). "
            "If the user supplies dialogue or asks for Russian voiceover, keep Dialogue EXACTLY as given in Russian "
            "(no translation), and require per-syllable lip-sync for Russian."
        )
        user_payload = {
            "idea": text_wo_dialogue[:900],
            "dialogue_raw": dialogue_text[:300],
            "need_russian_vo": is_ru_vo
        }
        try:
            resp = await asyncio.to_thread(
                _oai_client.chat.completions.create,
                model=os.getenv("OPENAI_PM_MODEL", "gpt-4o-mini"),
                messages=[
                    {"role": "system", "content": system},
                    {"role": "user", "content": f"Build the prompt using:\n{user_payload}"}
                ],
                temperature=float(os.getenv("OPENAI_PM_TEMPERATURE", "0.8")),
                max_tokens=int(os.getenv("OPENAI_PM_MAXTOKENS", "900")),
            )
            out = (resp.choices[0].message.content or "").strip()
            if out:
                return out[:1400]
        except Exception as e:
            log.warning("OpenAI Prompt-Master API failed: %s", e)

    # 2) –û—Ñ–ª–∞–π–Ω —à–∞–±–ª–æ–Ω
    Scene = text_wo_dialogue or "Visually rich, story-driven moment in a believable world."
    Camera = "Slow dolly-in, gentle arcs, depth-of-field pulls; 24‚Äì30fps, natural motion blur."
    Action = "Grounded micro-actions, tactile props, atmospheric particles; subtle performance beats."
    Lighting = "Soft key + cool rim; practicals; light haze for volumetric shafts; high dynamic range."
    Ward = "Authentic wardrobe with 1‚Äì2 accent colors; era-true props; no visible branding."
    Framing = "Rule-of-thirds with occasional symmetry; foreground occlusion; tasteful lens breathing."
    Constraints = "No subtitles. No on-screen text. No logos."

    if is_ru_vo:
        Dialogue = (dialogue_text if dialogue_text else "‚Äî")
        Lip = "Exact per-syllable lip-sync for Russian; align visemes to phonemes; no desync."
        Audio = "Russian voiceover, cinematic ambience and gentle foley; score supports emotion."
    else:
        Dialogue = (dialogue_text if dialogue_text else "‚Äî")
        Lip = "If dialogue present, ensure precise lip-sync; map visemes to phonemes; no desync."
        Audio = "Cinematic ambience, gentle foley, warm score; voice if dialogue present."

    tmpl = (
        "High-quality cinematic 4K video (16:9).\n"
        f"Scene: {Scene}\n"
        f"Camera: {Camera}\n"
        f"Action: {Action}\n"
        f"Dialogue: {Dialogue}\n"
        f"Lip-sync: {Lip}\n"
        f"Audio: {Audio}\n"
        f"Lighting: {Lighting}\n"
        f"Wardrobe/props: {Ward}\n"
        f"Framing: {Framing}\n"
        f"Constraints: {Constraints}"
    )
    return tmpl

# ==========================
#   Handlers
# ==========================
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    # –ë–æ–Ω—É—Å –Ω–æ–≤—ã–º
    if not rdb.exists(bal_key(uid)):
        set_balance(uid, 10)
    bal = get_balance(uid)
    await update.message.reply_text(
        WELCOME.format(balance=bal, prompts_url=PROMPTS_CHANNEL_URL),
        parse_mode=ParseMode.MARKDOWN, reply_markup=main_menu_kb()
    )

async def show_card_veo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    s = S(ctx)
    bal = get_balance(update.effective_user.id)
    text = build_card_text_veo(s, bal)
    await (update.callback_query.message.reply_text if update.callback_query else update.message.reply_text)(
        text, parse_mode=ParseMode.MARKDOWN, reply_markup=card_keyboard_veo(s), disable_web_page_preview=True
    )

# ---- CALLBACKS
async def on_callback(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    uid = update.effective_user.id; data = q.data or ""
    s = S(ctx)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è/—Ç–æ–ø–∞–ø
    if data == "back":
        await q.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb()); return
    if data == "topup_open":
        await q.message.reply_text(f"üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ Telegram Stars.\n–ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–≤—ë–∑–¥ ‚Äî –∫—É–ø–∏—Ç–µ –≤ {STARS_BUY_URL}",
                                   reply_markup=stars_topup_kb()); return
    if data.startswith("buy:stars:"):
        stars = int(data.split(":")[-1]); tokens = tokens_for_stars(stars)
        if tokens <= 0:
            await q.message.reply_text("‚ö†Ô∏è –¢–∞–∫–æ–π –ø–∞–∫–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."); return
        title = f"{stars}‚≠ê ‚Üí {tokens}üíé"
        payload = json.dumps({"kind":"stars_pack","stars":stars,"tokens":tokens})
        try:
            await ctx.bot.send_invoice(
                chat_id=uid, title=title, description="–ü–∞–∫–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ (Stars/XTR)",
                payload=payload, provider_token="", currency="XTR",
                prices=[LabeledPrice(label=title, amount=stars)]
            )
        except Exception as e:
            await q.message.reply_text(
                f"–ï—Å–ª–∏ —Å—á—ë—Ç –Ω–µ –æ—Ç–∫—Ä—ã–ª—Å—è ‚Äî –∫—É–ø–∏—Ç–µ 1‚≠ê –≤ {STARS_BUY_URL} –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=stars_topup_kb()
            )
        return

    # –†–µ–∂–∏–º—ã
    if data == "mode:veo_fast":
        s.update({"mode":"veo_text", "model":"veo3_fast", "aspect":"16:9"})
        await q.message.reply_text("üìù –ü—Ä–∏—à–ª–∏—Ç–µ –∏–¥–µ—é/–ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–¥–µ–æ (VEO Fast).")
        await show_card_veo(update, ctx); return

    if data == "mode:veo_quality":
        s.update({"mode":"veo_text", "model":"veo3", "aspect":"16:9"})
        await q.message.reply_text("üìù –ü—Ä–∏—à–ª–∏—Ç–µ –∏–¥–µ—é/–ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–¥–µ–æ (VEO Quality).")
        await show_card_veo(update, ctx); return

    if data == "mode:veo_photo":
        s.update({"mode":"veo_photo", "model":"veo3_fast", "aspect":"9:16"})
        await q.message.reply_text("üñºÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ (–ø–æ–¥–ø–∏—Å—å-–ø—Ä–æ–º–ø—Ç ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é).")
        await show_card_veo(update, ctx); return

    if data == "mode:mj":
        s.update({"mode":"mj"})
        await q.message.reply_text("üñºÔ∏è –†–µ–∂–∏–º MJ: –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.",
                                   reply_markup=mj_start_kb()); return

    if data == "mj:add_prompt":
        s["mode"] = "mj_txt"
        await q.message.reply_text("‚úçÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π prompt –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ (—Ñ–æ—Ä–º–∞—Ç 16:9)."); return

    if data.startswith("mj:ar:"):
        ar = "16:9"
        prompt = s.get("last_prompt")
        if not prompt:
            await q.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∫–Ω–æ–ø–∫–∞ –≤—ã—à–µ)."); return
        price = TOKEN_COSTS["mj"]
        ok, rest = try_charge(uid, price)
        if not ok:
            await q.message.reply_text(
                f"üíé –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: –Ω—É–∂–Ω–æ {price}, –Ω–∞ –±–∞–ª–∞–Ω—Å–µ {rest}.\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ Stars: {STARS_BUY_URL}",
                reply_markup=stars_topup_kb()
            ); return
        await q.message.reply_text(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ –∑–∞–ø—É—â–µ–Ω–∞‚Ä¶\n–§–æ—Ä–º–∞—Ç: *{ar}*\nPrompt: `{prompt}`",
                                   parse_mode=ParseMode.MARKDOWN)
        ok2, task_id, msg = mj_generate(prompt.strip(), ar)
        if not ok2 or not task_id:
            add_tokens(uid, price)
            await q.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å MJ-–∑–∞–¥–∞—á—É: {msg}\nüíé –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã."); return
        await q.message.reply_text(f"üÜî MJ taskId: `{task_id}`\nüñåÔ∏è –†–∏—Å—É—é —ç—Å–∫–∏–∑ –∏ –¥–µ—Ç–∞–ª–∏‚Ä¶", parse_mode=ParseMode.MARKDOWN)
        asyncio.create_task(poll_mj_and_send_photos(uid, task_id, ctx, price)); return

    if data == "mode:banana":
        s.update({"mode":"banana", "banana_mode":True, "banana_photos":[], "banana_prompt":None})
        await q.message.reply_text(
            "üçå *Banana –≤–∫–ª—é—á—ë–Ω*\n"
            "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏—Ç–µ *–¥–æ 4 —Ñ–æ—Ç–æ* (–≤–ª–æ–∂–µ–Ω–∏—è–º–∏). –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–æ—Ç–æ: ¬´üì∏ –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ (n/4)¬ª.\n"
            "–ó–∞—Ç–µ–º *–Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç*, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å: –∑–∞–º–µ–Ω–∏—Ç—å –æ–¥–µ–∂–¥—É/–º–∞–∫–∏—è–∂, –¥–æ–±–∞–≤–∏—Ç—å –ª—é–¥–µ–π, –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ñ–æ—Ç–æ, —Å–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏ —Ç.–¥.\n"
            "–ö–æ–≥–¥–∞ –≤—Å—ë –≥–æ—Ç–æ–≤–æ ‚Äî –∂–º–∏—Ç–µ ¬´üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Banana¬ª.",
            parse_mode=ParseMode.MARKDOWN, reply_markup=banana_kb()
        ); return

    if data == "banana:add_photo":
        await q.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ (–¥–æ 4).", reply_markup=banana_kb()); return

    if data == "banana:reset":
        s["banana_photos"] = []; s["banana_prompt"] = None
        await q.message.reply_text("üßπ –°–µ—Å—Å–∏—è Banana –æ—á–∏—â–µ–Ω–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ.", reply_markup=banana_kb()); return

    if data == "banana:start":
        photos = s.get("banana_photos") or []
        prompt = s.get("banana_prompt")
        if not photos:
            await q.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ (–¥–æ 4).", reply_markup=banana_kb()); return
        if not prompt:
            await q.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ —Ñ–æ—Ç–æ (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º).", reply_markup=banana_kb()); return
        price = TOKEN_COSTS["banana"]
        ok, rest = try_charge(uid, price)
        if not ok:
            await q.message.reply_text(
                f"üíé –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: –Ω—É–∂–Ω–æ {price}, –Ω–∞ –±–∞–ª–∞–Ω—Å–µ {rest}.\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ Stars: {STARS_BUY_URL}",
                reply_markup=stars_topup_kb()
            ); return
        await q.message.reply_text("üçå –ó–∞–ø—É—Å–∫–∞—é Banana‚Ä¶ ‚è≥", reply_markup=banana_kb())
        asyncio.create_task(wait_for_banana_result(uid, photos, prompt, ctx, price)); return

    if data == "mode:prompt_master":
        s["pm_return_to"] = s.get("mode") or "veo_text"
        s["mode"] = "prompt_master"
        await q.message.reply_text(
            "üß† *Prompt-Master –≥–æ—Ç–æ–≤!* –ù–∞–ø–∏—à–∏—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n"
            "‚Ä¢ –ò–¥–µ—é —Å—Ü–µ–Ω—ã (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –∏ –ª–æ–∫–∞—Ü–∏—é.\n"
            "‚Ä¢ –°—Ç–∏–ª—å/–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Å–≤–µ—Ç, –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã.\n"
            "‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ –∏ –¥–∏–Ω–∞–º–∏–∫—É –∫–∞–º–µ—Ä—ã.\n"
            "‚Ä¢ –†–µ–ø–ª–∏–∫–∏ ‚Äî –≤ –∫–∞–≤—ã—á–∫–∞—Ö. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –æ–∑–≤—É—á–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º ‚Äî —Ç–∞–∫ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ.",
            parse_mode=ParseMode.MARKDOWN
        ); return

    if data == "mode:chat":
        await q.message.reply_text("üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç –≤–∫–ª—é—á—ë–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å."); s["mode"]="chat"; return

    if data == "faq":
        await q.message.reply_text(
            "üìñ FAQ ‚Äî –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã\n\n"
            "‚≠ê –û–±—â–∞—è –∏–Ω—Ñ–∞\n"
            "–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç?\n"
            "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ (VEO), –∫–∞—Ä—Ç–∏–Ω–æ–∫ (MJ), —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ (Banana), –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∏–¥–µ–π (Prompt-Master) –∏ —á–∞—Ç (ChatGPT).\n"
            "–ó–≤—ë–∑–¥—ã (üíé) ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞ –±–æ—Ç–∞. –ë–∞–ª–∞–Ω—Å –≤–∏–¥–Ω–æ –≤ –º–µ–Ω—é. –ü–æ–∫—É–ø–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ Telegram.\n"
            "‚∏ª\n\n"
            "üé¨ VEO (–í–∏–¥–µ–æ)\n"
            "‚Ä¢ Fast ‚Äî –±—ã—Å—Ç—Ä—ã–π —Ä–æ–ª–∏–∫, 2‚Äì5 –º–∏–Ω. –°—Ç–æ–∏–º–æ—Å—Ç—å: 50üíé.\n"
            "‚Ä¢ Quality ‚Äî –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, 5‚Äì10 –º–∏–Ω. –°—Ç–æ–∏–º–æ—Å—Ç—å: 150üíé.\n"
            "‚Ä¢ Animate ‚Äî –æ–∂–∏–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ.\n"
            "üëâ –û–ø–∏—à–∏—Ç–µ –∏–¥–µ—é (–ª–æ–∫–∞—Ü–∏—è, —Å—Ç–∏–ª—å, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ) –∏ –∂–¥–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –∫–ª–∏–ø.\n"
            "‚∏ª\n\n"
            "üñºÔ∏è MJ (–ö–∞—Ä—Ç–∏–Ω–∫–∏)\n"
            "‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: 15üíé.\n"
            "‚Ä¢ –í—Ä–µ–º—è: 30‚Äì90 —Å–µ–∫.\n"
            "üëâ –ß–µ–º –¥–µ—Ç–∞–ª—å–Ω–µ–µ –ø—Ä–æ–º–ø—Ç (—Ü–≤–µ—Ç, —Å–≤–µ—Ç, —Å—Ç–∏–ª—å), —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n"
            "‚∏ª\n\n"
            "üçå Banana (–†–µ–¥–∞–∫—Ç–æ—Ä —Ñ–æ—Ç–æ)\n"
            "‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: 5üíé.\n"
            "‚Ä¢ –î–æ 4 —Ñ–æ—Ç–æ + –ø—Ä–æ–º–ø—Ç.\n"
            "‚Ä¢ –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –±–æ—Ç –ø–∏—à–µ—Ç ¬´üì∏ –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ (n/4)¬ª.\n"
            "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è ¬´üöÄ –ù–∞—á–∞—Ç—å¬ª.\n"
            "‚∏ª\n\n"
            "üß† Prompt-Master\n"
            "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ.\n"
            "‚Ä¢ –û–ø–∏—à–∏—Ç–µ –∏–¥–µ—é: –ª–æ–∫–∞—Ü–∏—è, —Å—Ç–∏–ª—å, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Å–≤–µ—Ç, –∫–∞–º–µ—Ä–∞, —Ä–µ–ø–ª–∏–∫–∏.\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –∫–∏–Ω–æ–ø—Ä–æ–º–ø—Ç –≤ –Ω—É–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.\n"
            "‚∏ª\n\n"
            "üí¨ ChatGPT\n"
            "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ.\n"
            "‚Ä¢ –û–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n"
            "‚∏ª\n\n"
            "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "–°–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å?\n"
            "‚Ä¢ –ö–∞—Ä—Ç–∏–Ω–∫–∏ / Banana ‚Äî –¥–æ 2 –º–∏–Ω—É—Ç.\n"
            "‚Ä¢ –í–∏–¥–µ–æ Fast ‚Äî 2‚Äì5 –º–∏–Ω—É—Ç.\n"
            "‚Ä¢ –í–∏–¥–µ–æ Quality ‚Äî 5‚Äì10 –º–∏–Ω—É—Ç.\n\n"
            "–ì–¥–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?\n"
            "–ß–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å¬ª –≤ –º–µ–Ω—é.\n\n"
            "–ú–æ–∂–Ω–æ –ª–∏ –ø–∏—Å–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º?\n"
            "–î–∞, –≤—Å–µ —Ä–µ–∂–∏–º—ã –ø–æ–Ω–∏–º–∞—é—Ç —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.",
        ); return

    # –ö–∞—Ä—Ç–æ—á–∫–∞ VEO ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä—ã/–∫–Ω–æ–ø–∫–∏
    if data.startswith("aspect:"):
        s["aspect"] = "9:16" if data.endswith("9:16") else "16:9"
        await show_card_veo(update, ctx); return

    if data.startswith("model:"):
        s["model"] = "veo3" if data.endswith("veo3") else "veo3_fast"
        await show_card_veo(update, ctx); return

    if data == "card:toggle_photo":
        if s.get("last_image_url"):
            s["last_image_url"] = None; await q.message.reply_text("üßπ –§–æ—Ç–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å —É–¥–∞–ª—ë–Ω.")
        else:
            await q.message.reply_text("üìé –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤–ª–æ–∂–µ–Ω–∏–µ–º –∏–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        await show_card_veo(update, ctx); return

    if data == "card:edit_prompt":
        await q.message.reply_text("‚úçÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞."); return

    if data == "card:prompt_master":
        s["pm_return_to"] = s.get("mode") or "veo_text"
        s["mode"] = "prompt_master"
        await q.message.reply_text(
            "üß† *Prompt-Master –≥–æ—Ç–æ–≤!* –ù–∞–ø–∏—à–∏—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n"
            "‚Ä¢ –ò–¥–µ—é —Å—Ü–µ–Ω—ã –∏ –ª–æ–∫–∞—Ü–∏—é; —Å—Ç–∏–ª—å/–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Å–≤–µ—Ç, –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã.\n"
            "‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ –∏ –¥–∏–Ω–∞–º–∏–∫—É –∫–∞–º–µ—Ä—ã. –†–µ–ø–ª–∏–∫–∏ ‚Äî –≤ –∫–∞–≤—ã—á–∫–∞—Ö.\n"
            "‚Ä¢ –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –æ–∑–≤—É—á–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º ‚Äî —Ç–∞–∫ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ.",
            parse_mode=ParseMode.MARKDOWN
        ); return

    if data == "card:reset":
        keep_aspect = s.get("aspect") or "16:9"
        keep_model  = s.get("model") or "veo3_fast"
        s.update({**DEFAULT_STATE}); s["aspect"] = keep_aspect; s["model"] = keep_model
        await q.message.reply_text("üóÇÔ∏è –ö–∞—Ä—Ç–æ—á–∫–∞ –æ—á–∏—â–µ–Ω–∞.")
        await show_card_veo(update, ctx); return

    if data == "card:generate":
        if not s.get("last_prompt"):
            await q.message.reply_text("‚úçÔ∏è –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞."); return
        price = TOKEN_COSTS['veo_quality'] if s.get('model') == 'veo3' else TOKEN_COSTS['veo_fast']
        ok, rest = try_charge(uid, price)
        if not ok:
            await q.message.reply_text(
                f"üíé –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: –Ω—É–∂–Ω–æ {price}, –Ω–∞ –±–∞–ª–∞–Ω—Å–µ {rest}.\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ Stars: {STARS_BUY_URL}",
                reply_markup=stars_topup_kb()
            ); return
        await q.message.reply_text(
            f"üöÄ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ({'üíé Quality' if s.get('model')=='veo3' else '‚ö° Fast'}).\nüé• –†–µ–Ω–¥–µ—Ä –∑–∞–ø—É—â–µ–Ω‚Ä¶"
        )
        ok2, task_id, msg = submit_kie_veo(s["last_prompt"].strip(), s.get("aspect","16:9"),
                                           s.get("last_image_url"), s.get("model","veo3_fast"))
        if not ok2 or not task_id:
            add_tokens(uid, price)
            await q.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å VEO-–∑–∞–¥–∞—á—É: {msg}\nüíé –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã."); return
        s["last_task_id"] = task_id
        asyncio.create_task(poll_veo_and_send(uid, task_id, s.get("aspect")=="9:16", s.get("model")=="veo3", ctx, price))
        return

# ---- TEXT & PHOTO
async def on_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    s = S(ctx); uid = update.effective_user.id
    text = (update.message.text or "").strip()

    # Banana ‚Äî –ø—Ä–∏—ë–º –ø—Ä–æ–º–ø—Ç–∞ –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ
    if s.get("banana_mode") and s.get("mode") == "banana":
        if text.startswith("/"): return
        s["banana_prompt"] = text
        await update.message.reply_text(
            "‚úçÔ∏è –ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –≤—Å–µ —Ñ–æ—Ç–æ (–¥–æ 4).\n–ì–æ—Ç–æ–≤—ã? –ñ–º–∏—Ç–µ ¬´üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Banana¬ª.",
            reply_markup=banana_kb()
        ); return

    # PM —Ä–µ–∂–∏–º (–≤–∫–ª—é—á—ë–Ω –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ VEO)
    if s.get("mode") == "prompt_master":
        pm = await oai_prompt_master(text[:1000])
        if not pm:
            await update.message.reply_text("‚ö†Ô∏è Prompt-Master —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."); return
        s["last_prompt"] = pm
        s["mode"] = s.pop("pm_return_to", "veo_text")
        await update.message.reply_text("üß† –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–º–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ä—Ç–æ—á–∫—É.")
        await show_card_veo(update, ctx); return

    # MJ ‚Äî –≤–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–∞
    if s.get("mode") == "mj_txt":
        s["last_prompt"] = text
        await update.message.reply_text(
            f"‚úÖ Prompt —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n\n`{text}`\n\n–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ ¬´üèôÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å 16:9¬ª",
            parse_mode=ParseMode.MARKDOWN, reply_markup=mj_start_kb()
        ); return

    # –û–±—ã—á–Ω—ã–π —á–∞—Ç
    if s.get("mode") == "chat":
        await update.message.reply_text("ü§ù –Ø –Ω–∞ —Å–≤—è–∑–∏! (—á–∏—Å—Ç—ã–π —ç—Ö–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)\n" + text); return

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî VEO —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ —Ä–µ–∂–∏–º—ã –∫–ª–∞–¥—É—Ç –ø—Ä–æ–º–ø—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫—É
    s["last_prompt"] = text
    await update.message.reply_text("üü¶ VEO ‚Äî –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–µ–Ω–¥–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∏–∂–µ –∏ –∂–º–∏—Ç–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª.")
    await show_card_veo(update, ctx)

async def on_photo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    s = S(ctx)
    photos = update.message.photo
    if not photos: return
    ph = photos[-1]
    file = await ctx.bot.get_file(ph.file_id)
    file_url = file.file_path if file.file_path.startswith("http") else f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file.file_path}"

    # Banana pipeline
    if s.get("banana_mode") and s.get("mode") == "banana":
        s["banana_photos"] = s.get("banana_photos") or []
        if len(s["banana_photos"]) >= 4:
            await update.message.reply_text("‚ö†Ô∏è –£–∂–µ 4/4. –£–¥–∞–ª–∏—Ç–µ –ª–∏—à–Ω–µ–µ —á–µ—Ä–µ–∑ ¬´üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ¬ª.", reply_markup=banana_kb()); return
        s["banana_photos"].append(file_url)
        await update.message.reply_text(
            f"üì∏ –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ ({len(s['banana_photos'])}/4).\n"
            "–¢–µ–ø–µ—Ä—å *–Ω–∞–ø–∏—à–∏—Ç–µ*, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (–º–æ–∂–Ω–æ –ø–æ-—Ä—É—Å—Å–∫–∏): –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –ª—é–¥–µ–π, –ø–æ–º–µ–Ω—è—Ç—å –æ–¥–µ–∂–¥—É/–º–∞–∫–∏—è–∂, –¥–æ–±–∞–≤–∏—Ç—å –ª—é–¥–µ–π/—Ñ–æ–Ω/–ª–æ–∫–∞—Ü–∏—é –∏ —Ç.–ø.",
            parse_mode=ParseMode.MARKDOWN, reply_markup=banana_kb()
        ); return

    # –ò–Ω–∞—á–µ ‚Äî —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å –¥–ª—è VEO
    s["last_image_url"] = file_url
    await update.message.reply_text("üñºÔ∏è –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å."); await show_card_veo(update, ctx)

# ==========================
#   Pollers
# ==========================
async def poll_mj_and_send_photos(uid: int, task_id: str, ctx: ContextTypes.DEFAULT_TYPE, price: int):
    s = S(ctx)
    start = time.time()
    sent_wait = False
    while True:
        ok, flag, data = mj_status(task_id)
        if not ok:
            add_tokens(uid, price)
            await ctx.bot.send_message(uid, "‚ùå MJ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. üíé –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã."); return
        if flag == 0:
            # –∞–Ω—Ç–∏-—Å–ø–∞–º: –Ω–µ —á–∞—â–µ 40 —Å–µ–∫
            if not sent_wait or (time.time() - s.get("mj_wait_ts", 0)) >= 40:
                await ctx.bot.send_message(uid, "üñºÔ∏è‚ú® –†–∏—Å—É—é‚Ä¶")
                s["mj_wait_ts"] = time.time()
                sent_wait = True
            await asyncio.sleep(8); continue
        if flag in (2, 3):
            add_tokens(uid, price)
            msg = (data or {}).get("errorMessage") or "MidJourney –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
            await ctx.bot.send_message(uid, f"‚ùå MJ: {msg}\nüíé –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã."); return
        if flag == 1:
            urls = _extract_mj_image_urls(data or {})
            if not urls:
                add_tokens(uid, price)
                await ctx.bot.send_message(uid, "‚ö†Ô∏è –ì–æ—Ç–æ–≤–æ, –Ω–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. üíé –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã."); return
            if len(urls) == 1:
                await ctx.bot.send_photo(chat_id=uid, photo=urls[0])
            else:
                media = [InputMediaPhoto(u) for u in urls[:10]]
                await ctx.bot.send_media_group(chat_id=uid, media=media)
            await ctx.bot.send_message(uid, "‚úÖ *–ì–æ—Ç–æ–≤–æ!*", parse_mode=ParseMode.MARKDOWN,
                                       reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë", callback_data="mode:mj")]]))
            return
        if time.time() - start > 15*60:
            add_tokens(uid, price)
            await ctx.bot.send_message(uid, "‚åõ MJ –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. üíé –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã."); return

async def poll_veo_and_send(uid: int, task_id: str, expect_vertical: bool, is_quality: bool,
                            ctx: ContextTypes.DEFAULT_TYPE, price: int):
    start = time.time()
    while True:
        ok, state, res = get_kie_veo_status(task_id)
        if not ok:
            add_tokens(uid, price)
            await ctx.bot.send_message(uid, "‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ VEO. üíé –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã."); return
        if state == "success" and res:
            final_url = res
            if not expect_vertical and is_quality:
                u1080 = await try_get_1080_url(task_id)
                if u1080: final_url = u1080
            await ctx.bot.send_message(uid, "üéûÔ∏è –†–µ–Ω–¥–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª‚Ä¶")
            try:
                await ctx.bot.send_video(uid, final_url, supports_streaming=True)
            except Exception:
                await ctx.bot.send_message(uid, f"üîó –†–µ–∑—É–ª—å—Ç–∞—Ç: {final_url}")
            await ctx.bot.send_message(uid, "‚úÖ –ì–æ—Ç–æ–≤–æ!", reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë –≤–∏–¥–µ–æ", callback_data="mode:veo_fast")]]
            ))
            return
        if state in ("fail", "2", "3"):
            add_tokens(uid, price)
            await ctx.bot.send_message(uid, "‚ùå VEO –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ. üíé –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã."); return
        if time.time() - start > 20*60:
            add_tokens(uid, price)
            await ctx.bot.send_message(uid, "‚åõ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è VEO. üíé –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã."); return
        await asyncio.sleep(6)

async def wait_for_banana_result(uid: int, photos: List[str], prompt: str,
                                 ctx: ContextTypes.DEFAULT_TYPE, price: int):
    try:
        ok, task_id, err = create_banana_task(prompt, photos)
        if not ok or not task_id:
            add_tokens(uid, price)
            await ctx.bot.send_message(uid, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Banana-–∑–∞–¥–∞—á—É: {err or '–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞'}\nüíé –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
            return
        start = time.time()
        while True:
            ok2, state, payload = get_banana_status(task_id)
            if not ok2:
                add_tokens(uid, price)
                await ctx.bot.send_message(uid, f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Banana: {payload or '–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞'}\nüíé –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
                return
            if state == "success":
                urls = payload or []
                if not urls:
                    add_tokens(uid, price)
                    await ctx.bot.send_message(uid, "‚ö†Ô∏è –ì–æ—Ç–æ–≤–æ, –Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–µ—Ç. üíé –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã."); return
                if len(urls) == 1:
                    await ctx.bot.send_photo(uid, urls[0])
                else:
                    media = [InputMediaPhoto(u) for u in urls[:10]]
                    await ctx.bot.send_media_group(uid, media)
                await ctx.bot.send_message(uid, "‚úÖ –ì–æ—Ç–æ–≤–æ! üçå Banana –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É.")
                # –æ—á–∏—Å—Ç–∏–º —Å–µ—Å—Å–∏—é Banana
                s = S(ctx); s["banana_mode"] = False; s["banana_photos"] = []; s["banana_prompt"] = None
                return
            if state == "fail":
                add_tokens(uid, price)
                await ctx.bot.send_message(uid, "‚ùå Banana: –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π. üíé –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
                return
            if time.time() - start > 15*60:
                add_tokens(uid, price)
                await ctx.bot.send_message(uid, "‚åõ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è Banana. üíé –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
                return
            await asyncio.sleep(6)
    except Exception as e:
        add_tokens(uid, price)
        try:
            await ctx.bot.send_message(uid, f"üí• –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ Banana: {e}\nüíé –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
        except Exception:
            pass

# ==========================
#   Payments (Stars/XTR)
# ==========================
async def precheckout_callback(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try:
        await update.pre_checkout_query.answer(ok=True)
    except Exception:
        await update.pre_checkout_query.answer(ok=False, error_message=f"–ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def successful_payment_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    sp = update.message.successful_payment
    try:
        meta = json.loads(sp.invoice_payload)
    except Exception:
        meta = {}
    stars = int(sp.total_amount)
    tokens = int(meta.get("tokens") or tokens_for_stars(stars))
    add_tokens(update.effective_user.id, tokens)
    await update.message.reply_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞: +{tokens}üíé\n–ë–∞–ª–∞–Ω—Å: *{get_balance(update.effective_user.id)}* üíé",
                                    parse_mode=ParseMode.MARKDOWN)

# ==========================
#   Entry
# ==========================
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).rate_limiter(AIORateLimiter()).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(on_callback))
    app.add_handler(MessageHandler(filters.PHOTO, on_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    app.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
