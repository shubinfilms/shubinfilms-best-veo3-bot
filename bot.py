# -*- coding: utf-8 -*-
# VEO3 bot ‚Äî –∫—Ä–∞—Å–∏–≤—ã–π UI + Fast/Quality + Prompt-Master + —Å—á—ë—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
# PTB 20.7 (async), —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞–∫–µ—Ç: python-telegram-bot[rate-limiter]==20.7

import os
import json
import time
import uuid
import asyncio
import logging
import tempfile
from typing import Dict, Any, Optional, List, Tuple, Union

import requests
from dotenv import load_dotenv

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile,
)
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    AIORateLimiter,
)

# ==========================
#        ENV / CONFIG
# ==========================
load_dotenv()

TELEGRAM_TOKEN   = (os.getenv("TELEGRAM_TOKEN") or "").strip()
KIE_API_KEY      = (os.getenv("KIE_API_KEY") or "").strip()
KIE_BASE_URL     = os.getenv("KIE_BASE_URL", "https://api.kie.ai").strip()
KIE_GEN_PATH     = os.getenv("KIE_GEN_PATH", "/api/v1/veo/generate").strip()
KIE_STATUS_PATH  = os.getenv("KIE_STATUS_PATH", "/api/v1/veo/record-info").strip()
KIE_HD_PATH      = os.getenv("KIE_HD_PATH", "/api/v1/veo/get-1080p-video").strip()  # –Ω–∞ –±—É–¥—É—â–µ–µ

PROMPTS_CHANNEL_URL = os.getenv("PROMPTS_CHANNEL_URL", "https://t.me/bestveo3promts").strip()
TOPUP_URL           = os.getenv("TOPUP_URL", "https://t.me/bestveo3promts/1").strip()  # –∑–∞–≥–ª—É—à–∫–∞-–ª–∏–Ω–∫

# OpenAI (legacy SDK 0.28.x; –º–æ–∂–Ω–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å)
OPENAI_API_KEY = (os.getenv("OPENAI_API_KEY") or "").strip()
try:
    import openai  # type: ignore
    if OPENAI_API_KEY:
        openai.api_key = OPENAI_API_KEY
except Exception:
    openai = None

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∂–∏–¥–∞–Ω–∏—è
POLL_INTERVAL_SECS = int(os.getenv("POLL_INTERVAL_SECS", "6"))
POLL_TIMEOUT_SECS  = int(os.getenv("POLL_TIMEOUT_SECS", str(20 * 60)))

# –ë–∞–ª–∞–Ω—Å/–∫—Ä–µ–¥–∏—Ç—ã
FREE_CREDITS      = int(os.getenv("FREE_CREDITS", "2"))   # —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ
FAST_COST         = float(os.getenv("FAST_COST", "1.0"))  # —Å—Ç–æ–∏–º–æ—Å—Ç—å ¬´Fast¬ª
QUALITY_COST      = float(os.getenv("QUALITY_COST", "2.0"))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(level=LOG_LEVEL, format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
log = logging.getLogger("veo3-bot")

USERS_FILE = "users.json"   # —Ö—Ä–∞–Ω–∏–º –∫—Ä–µ–¥–∏—Ç—ã –∏ –ø—Ä–æ—á–µ–µ
# —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: { "<chat_id>": {"credits": 3 } }

# ==========================
#       –•—Ä–∞–Ω–∏–ª–∏—â–µ
# ==========================
def _load_users() -> Dict[str, Dict[str, Any]]:
    try:
        if os.path.exists(USERS_FILE):
            with open(USERS_FILE, "r", encoding="utf-8") as f:
                return json.load(f) or {}
    except Exception as e:
        log.warning("Load users.json failed: %s", e)
    return {}

def _save_users(data: Dict[str, Dict[str, Any]]) -> None:
    try:
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log.warning("Save users.json failed: %s", e)

USERS = _load_users()

def _get_credits(chat_id: int) -> float:
    u = USERS.get(str(chat_id)) or {}
    if "credits" not in u:
        u["credits"] = float(FREE_CREDITS)
        USERS[str(chat_id)] = u
        _save_users(USERS)
    return float(u.get("credits", 0))

def _add_credits(chat_id: int, amount: float) -> None:
    u = USERS.get(str(chat_id)) or {"credits": 0}
    u["credits"] = float(u.get("credits", 0)) + float(amount)
    USERS[str(chat_id)] = u
    _save_users(USERS)

def _spend_credits(chat_id: int, amount: float) -> bool:
    cur = _get_credits(chat_id)
    if cur >= amount:
        USERS[str(chat_id)]["credits"] = round(cur - amount, 3)
        _save_users(USERS)
        return True
    return False

# ==========================
#     –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
# ==========================
def join_url(base: str, path: str) -> str:
    u = f"{base.rstrip('/')}/{path.lstrip('/')}"
    return u.replace("://", "¬ß¬ß").replace("//", "/").replace("¬ß¬ß", "://")

def mask_secret(s: str, show: int = 8) -> str:
    s = (s or "").strip()
    return "*" * max(0, len(s) - show) + s[-show:]

def pick_first_url(value: Union[str, List[str], None]) -> Optional[str]:
    if not value:
        return None
    if isinstance(value, str):
        v = value.strip()
        return v or None
    for v in value:
        if isinstance(v, str) and v.strip():
            return v.strip()
    return None

def tg_file_direct_url(bot_token: str, file_path: str) -> str:
    return f"https://api.telegram.org/file/bot{bot_token}/{file_path.lstrip('/')}"

def _kie_headers() -> Dict[str, str]:
    tok = KIE_API_KEY
    if tok and not tok.lower().startswith("bearer "):
        tok = f"Bearer {tok}"
    return {"Content-Type": "application/json", "Authorization": tok or ""}

def _post_json(url: str, payload: Dict[str, Any], timeout: int = 50) -> Tuple[int, Dict[str, Any]]:
    r = requests.post(url, json=payload, headers=_kie_headers(), timeout=timeout)
    try:
        return r.status_code, r.json()
    except Exception:
        return r.status_code, {"error": r.text}

def _get_json(url: str, params: Dict[str, Any], timeout: int = 40) -> Tuple[int, Dict[str, Any]]:
    r = requests.get(url, params=params, headers=_kie_headers(), timeout=timeout)
    try:
        return r.status_code, r.json()
    except Exception:
        return r.status_code, {"error": r.text}

def _extract_task_id(j: Dict[str, Any]) -> Optional[str]:
    data = j.get("data") or {}
    for k in ("taskId", "taskid", "id"):
        if j.get(k): return str(j[k])
        if data.get(k): return str(data[k])
    return None

def _extract_result_url(data: Dict[str, Any]) -> Optional[str]:
    # —á–∞—Å—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ data.response.resultUrls / originUrls
    resp = data.get("response") or {}
    for key in ("resultUrls", "originUrls", "resultUrl", "originUrl"):
        url = pick_first_url(resp.get(key))
        if url:
            return url
    for key in ("resultUrls", "originUrls", "resultUrl", "originUrl", "url"):
        url = pick_first_url(data.get(key))
        if url:
            return url
    return None

def _parse_success_flag(j: Dict[str, Any]) -> Tuple[Optional[int], Optional[str], Dict[str, Any]]:
    data = j.get("data") or {}
    msg  = j.get("msg") or j.get("message")
    # —Ñ–ª–∞–≥: 0 ‚Äî –≤ —Ä–∞–±–æ—Ç–µ, 1 ‚Äî –≥–æ—Ç–æ–≤–æ, 2/3 ‚Äî –æ—à–∏–±–∫–∞
    flag = None
    for k in ("successFlag", "status", "state"):
        if k in data:
            try:
                flag = int(data[k])
                break
            except Exception:
                pass
    return flag, msg, data

def _kie_error_message(status_code: int, j: Dict[str, Any]) -> str:
    code = j.get("code", status_code)
    msg = j.get("msg") or j.get("message") or j.get("error") or ""
    if code in (401, 403):
        base = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω: –ø—Ä–æ–≤–µ—Ä—å KIE_API_KEY (Bearer)."
    elif code == 451:
        base = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (451)."
    elif code == 429:
        base = "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (429)."
    elif code == 500:
        base = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ KIE (500)."
    else:
        base = f"KIE code {code}."
    return f"{base} {('‚Äî ' + msg) if msg else ''}".strip()

# ==========================
#        UI / –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ==========================
def top_menu_kb(credits: float) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton("üé¨ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="mode:text")],
        [InlineKeyboardButton("üì∑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ñ–æ—Ç–æ",  callback_data="mode:photo")],
        [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", url=TOPUP_URL)],
        [InlineKeyboardButton("ü§ñ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π ChatGPT", callback_data="mode:chat")],
    ]
    return InlineKeyboardMarkup(rows)

def aspect_row(cur: str) -> List[InlineKeyboardButton]:
    if cur == "9:16":
        return [InlineKeyboardButton("16:9", callback_data="aspect:16:9"),
                InlineKeyboardButton("9:16 ‚úÖ", callback_data="aspect:9:16")]
    return [InlineKeyboardButton("16:9 ‚úÖ", callback_data="aspect:16:9"),
            InlineKeyboardButton("9:16", callback_data="aspect:9:16")]

def speed_row(cur: str, quality_available: bool) -> List[InlineKeyboardButton]:
    fast   = "‚ö° Fast" + (" ‚úÖ" if cur == "fast" else "")
    if not quality_available:
        return [InlineKeyboardButton(fast, callback_data="speed:fast")]
    qual   = "üé¨ Quality" + (" ‚úÖ" if cur == "quality" else "")
    return [InlineKeyboardButton(fast, callback_data="speed:fast"),
            InlineKeyboardButton(qual, callback_data="speed:quality")]

def card_keyboard(s: Dict[str, Any], quality_available: bool) -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    rows.append([InlineKeyboardButton("üñºÔ∏è –î–æ–±–∞–≤–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="card:toggle_photo"),
                 InlineKeyboardButton("‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="card:edit_prompt")])
    rows.append(aspect_row(s.get("aspect", "16:9")))
    rows.append(speed_row(s.get("speed", "fast"), quality_available))
    if s.get("prompt"):
        rows.append([InlineKeyboardButton("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="card:generate")])
    rows.append([InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="card:reset"),
                 InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(rows)

def build_intro_text(credits: float) -> str:
    return (
        "üëã *–ü—Ä–∏–≤–µ—Ç!* –≠—Ç–æ –±–æ—Ç *Veo 3* ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –ò–ò.\n\n"
        "üìö –°–º–æ—Ç—Ä–∏ –ø—Ä–∏–º–µ—Ä—ã —Ä–æ–ª–∏–∫–æ–≤ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã ‚Äî @veo3prompts\n"
        "üìñ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è* ‚Äî –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º\n\n"
        f"üíé *–û—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:* {int(credits)}\n\n"
        "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?"
    )

def build_card_text(s: Dict[str, Any], quality_available: bool) -> str:
    prompt = (s.get("prompt") or "").strip()
    if len(prompt) > 800:
        prompt = prompt[:800] + "‚Ä¶"
    has_ref = "–µ—Å—Ç—å" if s.get("image_url") else "–Ω–µ—Ç"

    speed = s.get("speed", "fast")
    speed_label = "Fast ‚ö°" if speed == "fast" else "Quality üé¨"
    cost = FAST_COST if speed == "fast" else QUALITY_COST
    qual_line = "" if not quality_available else f"\n‚Ä¢ –†–µ–∂–∏–º: *{speed_label}* (—Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost:g})"

    return (
        "‚úçÔ∏è *–ü—Ä–æ–º–ø—Ç:*\n"
        f"`{prompt or '‚Äî'}`\n\n"
        "üìã *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:*\n"
        f"‚Ä¢ –§–æ—Ä–º–∞—Ç: *{s.get('aspect','16:9')}* üéû"
        f"{qual_line}\n"
        f"‚Ä¢ –ü—Ä–æ–º–ø—Ç: *{'–µ—Å—Ç—å' if s.get('prompt') else '–Ω–µ—Ç'}* ‚úçÔ∏è\n"
        f"‚Ä¢ –†–µ—Ñ–µ—Ä–µ–Ω—Å: *{has_ref}*\n"
    )

# ==========================
#        –°–æ—Å—Ç–æ—è–Ω–∏–µ
# ==========================
DEFAULT_STATE = {
    "mode": None,            # 'text' | 'photo' | 'chat'
    "aspect": "16:9",
    "speed": "fast",         # 'fast' | 'quality'
    "prompt": None,
    "image_url": None,
    "quality_available": True,  # –±—É–¥–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–ø—É—Å–∫–∞—Ç—å, –µ—Å–ª–∏ –ø—Ä–∏–¥—ë—Ç –æ—à–∏–±–∫–∞
    "generating": False,
    "current_task": None,
    "ui_msg_id": None,
}

def user_state(ctx: ContextTypes.DEFAULT_TYPE) -> Dict[str, Any]:
    ud = ctx.user_data
    # init defaults
    for k, v in DEFAULT_STATE.items():
        ud.setdefault(k, v)
    return ud

# ==========================
#     KIE API wrappers
# ==========================
def _payload_for_kie(prompt: str, aspect: str, speed: str, image_url: Optional[str]) -> Dict[str, Any]:
    payload = {
        "prompt": prompt,
        "aspectRatio": aspect,
        "model": "veo3_quality" if speed == "quality" else "veo3_fast",
    }
    if image_url:
        payload["imageUrl"] = image_url
    return payload

def submit_generation(prompt: str, aspect: str, speed: str, image_url: Optional[str]) -> Tuple[bool, Optional[str], str]:
    url = join_url(KIE_BASE_URL, KIE_GEN_PATH)
    status, j = _post_json(url, _payload_for_kie(prompt, aspect, speed, image_url))
    code = j.get("code", status)
    if status == 200 and code == 200:
        task_id = _extract_task_id(j)
        if task_id:
            return True, task_id, "ok"
        return False, None, "–û—Ç–≤–µ—Ç KIE –±–µ–∑ taskId."
    return False, None, _kie_error_message(status, j)

def get_status(task_id: str) -> Tuple[bool, Optional[int], Optional[str], Optional[str]]:
    url = join_url(KIE_BASE_URL, KIE_STATUS_PATH)
    status, j = _get_json(url, {"taskId": task_id})
    code = j.get("code", status)
    if status == 200 and code == 200:
        flag, msg, data = _parse_success_flag(j)
        return True, flag, msg, _extract_result_url(data or {})
    return False, None, _kie_error_message(status, j), None

# ==========================
#      –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
# ==========================
async def send_video(ctx: ContextTypes.DEFAULT_TYPE, chat_id: int, url: str) -> bool:
    # 1) –ø—Ä–æ–±—É–µ–º –æ—Ç–¥–∞—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É (—Ç–µ–ª–µ–≥—Ä–∞–º —Å–∞–º —Å–∫–∞—á–∞–µ—Ç)
    try:
        await ctx.bot.send_video(chat_id=chat_id, video=url, supports_streaming=True)
        return True
    except Exception as e:
        log.info("Direct URL send failed, try file. %s", e)
    # 2) —Å–∫–∞—á–∏–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
    tmp = None
    try:
        r = requests.get(url, stream=True, timeout=180)
        r.raise_for_status()
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as f:
            for chunk in r.iter_content(chunk_size=512 * 1024):
                if chunk:
                    f.write(chunk)
            tmp = f.name
        with open(tmp, "rb") as f:
            await ctx.bot.send_video(chat_id=chat_id, video=InputFile(f, filename="veo3.mp4"),
                                     supports_streaming=True)
        return True
    except Exception as e:
        log.exception("File send failed: %s", e)
        return False
    finally:
        if tmp:
            try: os.unlink(tmp)
            except Exception: pass

# ==========================
#     –ü–æ–ª–ª–∏–Ω–≥ –∑–∞–¥–∞—á–∏
# ==========================
async def poll_and_deliver(chat_id: int, task_id: str, ctx: ContextTypes.DEFAULT_TYPE):
    s = user_state(ctx)
    s["generating"] = True
    start = time.time()
    try:
        while True:
            ok, flag, msg, url = await asyncio.to_thread(get_status, task_id)
            if not ok:
                await ctx.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {msg or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
                break

            if flag == 0:  # –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
                if time.time() - start > POLL_TIMEOUT_SECS:
                    await ctx.bot.send_message(chat_id, "‚è≥ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    break
                await asyncio.sleep(POLL_INTERVAL_SECS)
                continue

            if flag == 1:  # –≥–æ—Ç–æ–≤–æ
                if not url:
                    await ctx.bot.send_message(chat_id, "‚ö†Ô∏è –ì–æ—Ç–æ–≤–æ, –Ω–æ —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    break
                sent = await send_video(ctx, chat_id, url)
                if sent:
                    await ctx.bot.send_message(chat_id, "‚úÖ –ì–æ—Ç–æ–≤–æ!")
                else:
                    await ctx.bot.send_message(chat_id, "‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                break

            if flag in (2, 3):
                await ctx.bot.send_message(chat_id, f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞. {msg or ''}".strip())
                break

            await asyncio.sleep(POLL_INTERVAL_SECS)
    except Exception as e:
        log.exception("Poller crashed: %s", e)
        try:
            await ctx.bot.send_message(chat_id, "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞.")
        except Exception:
            pass
    finally:
        s["generating"] = False
        s["current_task"] = None

# ==========================
#       Prompt-Master
# ==========================
async def prompt_master(idea: str) -> Optional[str]:
    if not (openai and OPENAI_API_KEY):
        return None
    sys = (
        "You are a world-class cinematic prompt writer for Google Veo 3. "
        "Return ONE English prompt, 450‚Äì900 chars, no preface, no bullets, no brand names. "
        "Include: subject, micro-actions, lens/optics (mm/anamorphic), camera movement, "
        "lighting (time, color temp, key/fill/rim), mood/atmosphere, texture/particles, "
        "composition, color palette, environment sound cues. "
        "Optionally a short line of dialogue in quotes. No logos, no watermarks."
    )
    try:
        resp = await asyncio.to_thread(
            openai.ChatCompletion.create,
            model="gpt-4o-mini",
            messages=[{"role": "system", "content": sys},
                      {"role": "user", "content": idea.strip()}],
            temperature=0.95,
            max_tokens=700,
        )
        out = resp["choices"][0]["message"]["content"].strip()
        return out[:1200]
    except Exception as e:
        log.exception("PromptMaster error: %s", e)
        return None

# ==========================
#        –•—ç–Ω–¥–ª–µ—Ä—ã
# ==========================
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞
    _get_credits(chat_id)
    s = user_state(ctx)
    # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    for k, v in DEFAULT_STATE.items():
        s[k] = v

    credits = _get_credits(chat_id)
    await update.message.reply_text(
        build_intro_text(credits),
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=top_menu_kb(credits),
        disable_web_page_preview=True
    )

async def on_callback(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = (q.data or "").strip()
    s = user_state(ctx)
    chat_id = update.effective_chat.id

    # —Ä–µ–∂–∏–º—ã
    if data.startswith("mode:"):
        mode = data.split(":", 1)[1]
        s["mode"] = mode
        s["ui_msg_id"] = None  # –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
        if mode == "text":
            await q.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –∏–¥–µ—é/–ø—Ä–æ–º–ø—Ç. –•–æ—á–µ—à—å ‚Äî –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä¬ª –∏ –ø—Ä–∏—à–ª–∏ —Ç–æ–ª—å–∫–æ –∏–¥–µ—é.")
        elif mode == "photo":
            await q.message.reply_text("üì∑ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å-–ø—Ä–æ–º–ø—Ç.")
        elif mode == "chat":
            await q.message.reply_text("ü§ñ –û–±—ã—á–Ω—ã–π —á–∞—Ç: –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã. –î–ª—è –≤—ã—Ö–æ–¥–∞ ‚Äî /start.")
        # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        await show_card(update, ctx)
        return

    # –∞—Å–ø–µ–∫—Ç
    if data.startswith("aspect:"):
        s["aspect"] = "9:16" if data.endswith("9:16") else "16:9"
        await show_card(update, ctx, edit_only_markup=True)
        return

    # —Å–∫–æ—Ä–æ—Å—Ç—å
    if data.startswith("speed:"):
        val = data.split(":", 1)[1]
        if val in ("fast", "quality"):
            s["speed"] = val
        await show_card(update, ctx, edit_only_markup=True)
        return

    # –∫–∞—Ä—Ç–æ—á–∫–∞-–∫–Ω–æ–ø–∫–∏
    if data == "card:toggle_photo":
        if s.get("image_url"):
            s["image_url"] = None
            await q.message.reply_text("üóëÔ∏è –†–µ—Ñ–µ—Ä–µ–Ω—Å —É–¥–∞–ª—ë–Ω.")
        else:
            await q.message.reply_text("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ (–∏–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–π URL –∫–∞—Ä—Ç–∏–Ω–∫–∏).")
        await show_card(update, ctx)
        return

    if data == "card:edit_prompt":
        await q.message.reply_text("–ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –∏–ª–∏ –∏–¥–µ—é –¥–ª—è *–ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä–∞*.", parse_mode=ParseMode.MARKDOWN)
        return

    if data == "card:reset":
        keep_aspect = s.get("aspect", "16:9")
        keep_quality_av = s.get("quality_available", True)
        for k, v in DEFAULT_STATE.items():
            s[k] = v
        s["aspect"] = keep_aspect
        s["quality_available"] = keep_quality_av
        await q.message.reply_text("üßπ –ö–∞—Ä—Ç–æ—á–∫–∞ –æ—á–∏—â–µ–Ω–∞.")
        await show_card(update, ctx)
        return

    if data == "back":
        credits = _get_credits(chat_id)
        await q.message.reply_text(
            build_intro_text(credits),
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=top_menu_kb(credits),
            disable_web_page_preview=True
        )
        return

    if data == "card:generate":
        if s.get("generating"):
            await q.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –∏–¥—ë—Ç. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            return
        if not s.get("prompt"):
            await q.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–ø—Ç.")
            return

        # –ø—Ä–æ–≤–µ—Ä–∏–º –∫—Ä–µ–¥–∏—Ç—ã
        cost = FAST_COST if s.get("speed") == "fast" else QUALITY_COST
        if not _spend_credits(chat_id, cost):
            await q.message.reply_text(
                f"üí≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π (–Ω—É–∂–Ω–æ {cost:g}). –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å¬ª.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", url=TOPUP_URL)]])
            )
            return

        ok, task_id, msg = await asyncio.to_thread(
            submit_generation, s["prompt"], s.get("aspect", "16:9"), s.get("speed", "fast"), s.get("image_url")
        )
        if not ok or not task_id:
            # –≤–µ—Ä–Ω—ë–º —Å–ø–∏—Å–∞–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ–±–∏–¥–Ω–æ
            _add_credits(chat_id, cost)
            # –µ—Å–ª–∏ —É–ø–∞–ª–æ –∏–∑-–∑–∞ ¬´quality¬ª ‚Äî –≤—ã–∫–ª—é—á–∏–º –µ–≥–æ –¥–æ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
            if "veo3_quality" in (msg or "").lower():
                s["quality_available"] = False
            await q.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É: {msg}")
            await show_card(update, ctx, edit_only_markup=True)
            return

        s["generating"] = True
        s["current_task"] = task_id
        await q.message.reply_text(f"üöÄ –û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–¥–∞—á—É –≤ Veo3 ({'Quality' if s['speed']=='quality' else 'Fast'}). taskId={task_id}")
        asyncio.create_task(poll_and_deliver(chat_id, task_id, ctx))
        return

async def on_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    s = user_state(ctx)
    text = (update.message.text or "").strip()

    # –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–π URL –∫–∞—Ä—Ç–∏–Ω–∫–∏
    low = text.lower()
    if low.startswith(("http://", "https://")) and low.split("?")[0].endswith((".jpg", ".jpeg", ".png", ".webp")):
        s["image_url"] = text.strip()
        await update.message.reply_text("üñºÔ∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∞.")
        await show_card(update, ctx)
        return

    # —Ä–µ–∂–∏–º—ã
    if s.get("mode") == "chat":
        if not (openai and OPENAI_API_KEY):
            await update.message.reply_text("‚ö†Ô∏è ChatGPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç OPENAI_API_KEY).")
            return
        try:
            resp = await asyncio.to_thread(
                openai.ChatCompletion.create,
                model="gpt-4o-mini",
                messages=[{"role": "system", "content": "You are a helpful, concise assistant."},
                          {"role": "user", "content": text}],
                temperature=0.5,
                max_tokens=600,
            )
            out = resp["choices"][0]["message"]["content"].strip()
            await update.message.reply_text(out or "‚Ä¶")
        except Exception as e:
            log.exception("Chat error: %s", e)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ ChatGPT.")
        return

    # –∫–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä¬ª –Ω–µ—Ç –∫–∞–∫ —Ç–∞–∫–æ–≤–æ–π ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±—ä—è—Å–Ω—è–µ–º —é–∑–µ—Ä—É:
    if text.strip().lower() in ("prompt", "prompt-master", "–ø—Ä–æ–º–ø—Ç", "–ø—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä"):
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ –∏–¥–µ—é ‚Äî –≤–µ—Ä–Ω—É –≥–æ—Ç–æ–≤—ã–π –∫–∏–Ω–æ–ø—Ä–æ–º–ø—Ç (EN).")
        return

    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–∏—Å–ª–∞–ª –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∏–¥–µ–µ–π ‚Üí –ø—Ä–æ–≥–æ–Ω—è–µ–º —á–µ—Ä–µ–∑ Prompt-Master
    # (–º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å ‚Äî —Ç–æ–≥–¥–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –±–ª–æ–∫ –Ω–∏–∂–µ)
    pm = await prompt_master(text)
    if pm:
        s["prompt"] = pm
        await update.message.reply_text("üß† –ì–æ—Ç–æ–≤–æ! –î–æ–±–∞–≤–∏–ª –∫–∏–Ω–æ–ø—Ä–æ–º–ø—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫—É.")
    else:
        s["prompt"] = text
        await update.message.reply_text("‚úçÔ∏è –ü—Ä–∏–Ω—è–ª —Ç–µ–∫—Å—Ç –∫–∞–∫ –ø—Ä–æ–º–ø—Ç (Prompt-Master –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω).")
    await show_card(update, ctx)

async def on_photo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    s = user_state(ctx)
    photos = update.message.photo
    if not photos:
        return
    ph = photos[-1]
    try:
        f = await ctx.bot.get_file(ph.file_id)
        if not f or not f.file_path:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É Telegram.")
            return
        url = tg_file_direct_url(TELEGRAM_TOKEN, f.file_path)
        log.info("Got TG photo path: ...%s", mask_secret(url))
        s["image_url"] = url
        await update.message.reply_text("üñºÔ∏è –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å.")
        await show_card(update, ctx)
    except Exception as e:
        log.exception("Get photo failed: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–π URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–µ–∫—Å—Ç–æ–º.")

async def error_handler(update: Optional[Update], ctx: ContextTypes.DEFAULT_TYPE):
    log.exception("Unhandled error: %s", ctx.error)
    try:
        if update and update.effective_chat:
            await ctx.bot.send_message(update.effective_chat.id, "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    except Exception:
        pass

# –ø–æ–∫–∞–∑–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
async def show_card(update: Update, ctx: ContextTypes.DEFAULT_TYPE, edit_only_markup: bool = False):
    s = user_state(ctx)
    chat_id = update.effective_chat.id
    text = build_card_text(s, s.get("quality_available", True))
    kb = card_keyboard(s, s.get("quality_available", True))

    mid = s.get("ui_msg_id")
    try:
        if mid:
            if edit_only_markup:
                await ctx.bot.edit_message_reply_markup(chat_id, mid, reply_markup=kb)
            else:
                await ctx.bot.edit_message_text(chat_id=chat_id, message_id=mid, text=text,
                                                parse_mode=ParseMode.MARKDOWN, reply_markup=kb,
                                                disable_web_page_preview=True)
        else:
            m = await (update.callback_query.message.reply_text(text, parse_mode=ParseMode.MARKDOWN,
                                                                reply_markup=kb, disable_web_page_preview=True)
                       if update.callback_query else
                       update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN,
                                                 reply_markup=kb, disable_web_page_preview=True))
            s["ui_msg_id"] = m.message_id
    except Exception as e:
        log.warning("show_card failed: %s", e)
        try:
            m = await ctx.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.MARKDOWN,
                                           reply_markup=kb, disable_web_page_preview=True)
            s["ui_msg_id"] = m.message_id
        except Exception as e2:
            log.exception("show_card send failed: %s", e2)

# ==========================
#        Entry point
# ==========================
def main():
    if not TELEGRAM_TOKEN:
        raise RuntimeError("TELEGRAM_TOKEN is not set")
    if not (KIE_API_KEY and KIE_BASE_URL and KIE_GEN_PATH and KIE_STATUS_PATH):
        raise RuntimeError("KIE env vars are not properly set")

    app = (
        ApplicationBuilder()
        .token(TELEGRAM_TOKEN)
        .rate_limiter(AIORateLimiter())
        .build()
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(on_callback))
    app.add_handler(MessageHandler(filters.PHOTO, on_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    app.add_error_handler(error_handler)

    log.info("Bot starting‚Ä¶ PTB 20.7 | KIE=%s", KIE_BASE_URL)
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
