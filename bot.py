# -*- coding: utf-8 -*-
# Best VEO3 Bot ‚Äî PTB 20.7 + KIE Veo3 + Prompt-Master
# –í–µ—Ä—Å–∏—è: 2025-09-07

import os
import json
import time
import uuid
import asyncio
import logging
import tempfile
from typing import Dict, Any, Optional, List, Tuple, Union

import requests
from dotenv import load_dotenv

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputFile,
)
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    AIORateLimiter,
)

# ==========================
#   –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è / ENV
# ==========================
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()

# OpenAI (—Å—Ç–∞—Ä—ã–π SDK 0.28.1, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
try:
    import openai  # type: ignore
    if OPENAI_API_KEY:
        openai.api_key = OPENAI_API_KEY
except Exception:
    openai = None  # –Ω–µ –≤–∞–ª–∏–º—Å—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫–ª—é—á–∏–º Prompt-Master/—á–∞—Ç

# ---- KIE ----
KIE_API_KEY = os.getenv("KIE_API_KEY", "").strip()               # –¢–æ–∫–µ–Ω
KIE_BASE_URL = os.getenv("KIE_BASE_URL", "https://api.kie.ai")   # https://api.kie.ai
KIE_GEN_PATH = os.getenv("KIE_GEN_PATH", "/api/v1/veo/generate") # POST –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
# —Å—Ç–∞—Ç—É—Å: Get Veo3 Video Details (OpenAPI –≤—ã—à–µ)
KIE_STATUS_PATH = os.getenv("KIE_STATUS_PATH", "/api/v1/veo/record-info")
# 1080p video endpoint
KIE_HD_PATH = os.getenv("KIE_HD_PATH", "/api/v1/veo/get-1080p-video")

# –ü–∞—É–∑—ã
POLL_INTERVAL_SECS = int(os.getenv("POLL_INTERVAL_SECS", "6"))
POLL_TIMEOUT_SECS = int(os.getenv("POLL_TIMEOUT_SECS", str(20 * 60)))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=LOG_LEVEL,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("best-veo3-bot")


# ==========================
#   –£—Ç–∏–ª–∏—Ç—ã
# ==========================
def join_url(base: str, path: str) -> str:
    u = f"{base.rstrip('/')}/{path.lstrip('/')}"
    return u.replace("://", "¬ß¬ß").replace("//", "/").replace("¬ß¬ß", "://")


def mask_secret(s: str, show: int = 6) -> str:
    if not s:
        return ""
    s = s.strip()
    if len(s) <= show:
        return "*" * len(s)
    return f"{'*' * (len(s) - show)}{s[-show:]}"


def pick_first_url(value: Union[str, List[str], None]) -> Optional[str]:
    if not value:
        return None
    if isinstance(value, str):
        return value.strip() or None
    if isinstance(value, list):
        for v in value:
            if isinstance(v, str) and v.strip():
                return v.strip()
    return None


def tg_file_direct_url(bot_token: str, file_path: str) -> str:
    # –í URL –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω ‚Äî –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º —Ü–µ–ª–∏–∫–æ–º
    return f"https://api.telegram.org/file/bot{bot_token}/{file_path.lstrip('/')}"


# ==========================
#   –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ==========================
DEFAULT_STATE = {
    "mode": None,              # 'gen_text' | 'gen_photo' | 'prompt_master' | 'chat'
    "aspect": "16:9",
    "last_prompt": None,
    "last_image_url": None,
    "generating": False,
    "generation_id": None,
    "last_ui_msg_id": None,
}

def state(ctx: ContextTypes.DEFAULT_TYPE) -> Dict[str, Any]:
    ud = ctx.user_data
    for k, v in DEFAULT_STATE.items():
        ud.setdefault(k, v)
    return ud


# ==========================
#   –ö–Ω–æ–ø–∫–∏ / UI
# ==========================
def main_menu_kb() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton("üé¨ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="mode:gen_text")],
        [InlineKeyboardButton("üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ñ–æ—Ç–æ", callback_data="mode:gen_photo")],
        [InlineKeyboardButton("üß† –ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä (ChatGPT)", callback_data="mode:prompt_master")],
        [InlineKeyboardButton("üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç (ChatGPT)", callback_data="mode:chat")],
        [
            InlineKeyboardButton("‚ùì FAQ", callback_data="faq"),
            InlineKeyboardButton("üìà –ö–∞–Ω–∞–ª —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏", url="https://t.me/bestveo3promts"),
        ],
    ]
    rows.append([InlineKeyboardButton("16:9 ‚úÖ", callback_data="aspect:16:9"),
                 InlineKeyboardButton("9:16",   callback_data="aspect:9:16")])
    return InlineKeyboardMarkup(rows)

def aspect_row(current: str) -> List[InlineKeyboardButton]:
    if current == "9:16":
        return [InlineKeyboardButton("16:9", callback_data="aspect:16:9"),
                InlineKeyboardButton("9:16 ‚úÖ", callback_data="aspect:9:16")]
    return [InlineKeyboardButton("16:9 ‚úÖ", callback_data="aspect:16:9"),
            InlineKeyboardButton("9:16", callback_data="aspect:9:16")]

def card_keyboard(s: Dict[str, Any]) -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    rows.append([InlineKeyboardButton("üñºÔ∏è –î–æ–±–∞–≤–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="card:toggle_photo"),
                 InlineKeyboardButton("‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", callback_data="card:edit_prompt")])
    rows.append(aspect_row(s["aspect"]))
    if s.get("last_prompt"):
        rows.append([InlineKeyboardButton("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="card:generate")])
    rows.append([InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="card:reset"),
                 InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    return InlineKeyboardMarkup(rows)

def build_card_text(s: Dict[str, Any]) -> str:
    prompt_preview = (s.get("last_prompt") or "").strip()
    if len(prompt_preview) > 900:
        prompt_preview = prompt_preview[:900] + "‚Ä¶"
    has_prompt = "–µ—Å—Ç—å" if s.get("last_prompt") else "–Ω–µ—Ç"
    has_ref = "–µ—Å—Ç—å" if s.get("last_image_url") else "–Ω–µ—Ç"
    lines = [
        "üéõÔ∏è *–ö–∞—Ä—Ç–æ—á–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏*",
        "",
        "‚úçÔ∏è *–ü—Ä–æ–º–ø—Ç:*",
        f"`{prompt_preview or '‚Äî'}`",
        "",
        "*üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*",
        f"‚Ä¢ –§–æ—Ä–º–∞—Ç: *{s.get('aspect','16:9')}*",
        "‚Ä¢ –†–µ–∂–∏–º: *Fast*",
        f"‚Ä¢ –ü—Ä–æ–º–ø—Ç: *{has_prompt}*",
        f"‚Ä¢ –†–µ—Ñ–µ—Ä–µ–Ω—Å: *{has_ref}*",
    ]
    return "\n".join(lines)


# ==========================
#   Prompt-Master / Chat
# ==========================
async def oai_prompt_master(idea_text: str) -> Optional[str]:
    if openai is None or not OPENAI_API_KEY:
        return None
    system = (
        "You are Prompt-Master for cinematic AI video generation. "
        "Output exactly ONE prompt in English, 500‚Äì900 characters, no meta, no brand names or logos. "
        "Include lens/optics (mm/anamorphic), camera movement, lighting/palette/atmosphere, "
        "micro-details (dust, steam), subtle audio cues. Optionally one short hero line in quotes. "
        "No lists. No prefaces. Just the prompt."
    )
    try:
        resp = await asyncio.to_thread(
            openai.ChatCompletion.create,
            model="gpt-4o-mini",
            messages=[{"role": "system", "content": system},
                      {"role": "user", "content": idea_text.strip()}],
            temperature=0.9,
            max_tokens=700,
        )
        txt = resp["choices"][0]["message"]["content"].strip()
        return txt[:1200]
    except Exception as e:
        log.exception("Prompt-Master error: %s", e)
        return None


# ==========================
#   KIE API helpers
# ==========================
def _kie_headers() -> Dict[str, str]:
    # –ü–æ OpenAPI —Ç—Ä–µ–±—É–µ—Ç—Å—è Bearer
    token = KIE_API_KEY
    if token and not token.lower().startswith("bearer "):
        token = f"Bearer {token}"
    return {"Content-Type": "application/json", "Authorization": token or ""}

def _post_json(url: str, payload: Dict[str, Any], timeout: int = 40) -> Tuple[int, Dict[str, Any]]:
    r = requests.post(url, data=json.dumps(payload), headers=_kie_headers(), timeout=timeout)
    try:
        return r.status_code, r.json()
    except Exception:
        return r.status_code, {"error": r.text}

def _get_json(url: str, params: Dict[str, Any], timeout: int = 40) -> Tuple[int, Dict[str, Any]]:
    r = requests.get(url, params=params, headers=_kie_headers(), timeout=timeout)
    try:
        return r.status_code, r.json()
    except Exception:
        return r.status_code, {"error": r.text}

def _extract_task_id(j: Dict[str, Any]) -> Optional[str]:
    data = j.get("data") or {}
    for k in ("taskId", "taskid", "id"):
        if j.get(k): return str(j[k])
        if data.get(k): return str(data[k])
    return None

def _parse_success_flag(j: Dict[str, Any]) -> Tuple[Optional[int], Optional[str], Dict[str, Any]]:
    data = j.get("data") or {}
    msg = j.get("msg") or j.get("message")
    flag = None
    for k in ("successFlag", "status", "state"):
        if k in data:
            try:
                flag = int(data[k])
                break
            except Exception:
                pass
    return flag, msg, data

def _extract_result_url(data: Dict[str, Any]) -> Optional[str]:
    resp = data.get("response") or {}
    for key in ("resultUrls", "originUrls", "resultUrl", "originUrl"):
        url = pick_first_url(resp.get(key))
        if url:
            return url
    for key in ("resultUrls", "originUrls", "resultUrl", "originUrl"):
        url = pick_first_url(data.get(key))
        if url:
            return url
    return pick_first_url(data.get("url"))

def _kie_error_message(status_code: int, j: Dict[str, Any]) -> str:
    code = j.get("code", status_code)
    msg = j.get("msg") or j.get("message") or j.get("error") or ""
    if code in (401, 403):
        base = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω (–ø—Ä–æ–≤–µ—Ä—å KIE_API_KEY / Bearer)."
    elif code == 451:
        base = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (451)."
    elif code == 429:
        base = "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (429)."
    elif code == 500:
        base = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ KIE (500)."
    else:
        base = f"KIE code {code}."
    return f"{base} {('–°–æ–æ–±—â–µ–Ω–∏–µ: ' + msg) if msg else ''}".strip()

def _build_payload_for_kie(prompt: str, aspect: str, image_url: Optional[str]) -> Dict[str, Any]:
    payload = {
        "prompt": prompt,
        "aspectRatio": aspect,    # –≤ –∏—Ö –¥–æ–∫–∞—Ö aspectRatio
        "model": "veo3_fast",
    }
    if image_url:
        payload["imageUrl"] = image_url
    return payload

def submit_kie_generation(prompt: str, aspect: str, image_url: Optional[str]) -> Tuple[bool, Optional[str], str]:
    url = join_url(KIE_BASE_URL, KIE_GEN_PATH)
    status, j = _post_json(url, _build_payload_for_kie(prompt, aspect, image_url))
    code = j.get("code", status)
    if status == 200 and code == 200:
        task_id = _extract_task_id(j)
        if task_id:
            return True, task_id, "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞."
        return False, None, "–û—Ç–≤–µ—Ç KIE –±–µ–∑ taskId."
    return False, None, _kie_error_message(status, j)

def get_kie_task_status(task_id: str) -> Tuple[bool, Optional[int], Optional[str], Optional[str]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, success_flag, status_message, result_url)."""
    url = join_url(KIE_BASE_URL, KIE_STATUS_PATH)
    # –í –∏—Ö OpenAPI —Å—Ç–∞—Ç—É—Å ‚Äî GET c query taskId
    status, j = _get_json(url, {"taskId": task_id})
    code = j.get("code", status)
    if status == 200 and code == 200:
        flag, msg, data = _parse_success_flag(j)
        return True, flag, msg, _extract_result_url(data or {})
    return False, None, _kie_error_message(status, j), None


# ==========================
#   –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞
# ==========================
async def send_video_with_fallback(ctx: ContextTypes.DEFAULT_TYPE, chat_id: int, url: str) -> bool:
    try:
        await ctx.bot.send_video(chat_id=chat_id, video=url, supports_streaming=True)
        return True
    except Exception as e:
        log.warning("Direct URL send failed, try download. %s", e)

    # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–º
    tmp_path = None
    try:
        r = requests.get(url, stream=True, timeout=120)
        r.raise_for_status()
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as f:
            for chunk in r.iter_content(chunk_size=256 * 1024):
                if chunk:
                    f.write(chunk)
            tmp_path = f.name
        with open(tmp_path, "rb") as f:
            await ctx.bot.send_video(chat_id=chat_id, video=InputFile(f, filename="result.mp4"), supports_streaming=True)
        return True
    except Exception as e:
        log.exception("File send failed: %s", e)
        return False
    finally:
        if tmp_path:
            try: os.unlink(tmp_path)
            except Exception: pass


# ==========================
#   –ü–æ–ª–ª–∏–Ω–≥ KIE
# ==========================
async def poll_kie_and_send(chat_id: int, task_id: str, gen_id: str, ctx: ContextTypes.DEFAULT_TYPE):
    s = state(ctx)
    s["generating"] = True
    s["generation_id"] = gen_id

    start_ts = time.time()
    log.info("Polling start: chat=%s task=%s gen=%s", chat_id, task_id, gen_id)

    try:
        while True:
            if s.get("generation_id") != gen_id:
                log.info("Polling cancelled ‚Äî superseded by newer job.")
                return

            ok, flag, msg, res_url = await asyncio.to_thread(get_kie_task_status, task_id)
            if not ok:
                await ctx.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {msg or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
                break

            if flag == 0:
                if (time.time() - start_ts) > POLL_TIMEOUT_SECS:
                    await ctx.bot.send_message(chat_id, "‚è≥ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    break
                await asyncio.sleep(POLL_INTERVAL_SECS)
                continue

            if flag == 1:
                if not res_url:
                    await ctx.bot.send_message(chat_id, "‚ö†Ô∏è –ì–æ—Ç–æ–≤–æ, –Ω–æ —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–æ—Ç–≤–µ—Ç KIE –±–µ–∑ URL).")
                    break
                if s.get("generation_id") != gen_id:
                    log.info("Ready but superseded ‚Äî skip send.")
                    return
                sent = await send_video_with_fallback(ctx, chat_id, res_url)
                await ctx.bot.send_message(chat_id, "‚úÖ –ì–æ—Ç–æ–≤–æ! (veo3_fast)" if sent else "‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ.")
                break

            if flag in (2, 3):
                await ctx.bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ KIE: {msg or '–±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è'}")
                break

            await asyncio.sleep(POLL_INTERVAL_SECS)
    except Exception as e:
        log.exception("Poller crashed: %s", e)
        try:
            await ctx.bot.send_message(chat_id, "‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞.")
        except Exception:
            pass
    finally:
        if s.get("generation_id") == gen_id:
            s["generating"] = False
            s["generation_id"] = None


# ==========================
#   –•—ç–Ω–¥–ª–µ—Ä—ã
# ==========================
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    s = state(ctx)
    s.update({**DEFAULT_STATE})
    s["aspect"] = "16:9"
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Best VEO3 bot. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Veo3/KIE.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=main_menu_kb(),
    )

async def error_handler(update: Optional[Update], context: ContextTypes.DEFAULT_TYPE):
    log.exception("Unhandled error: %s", context.error)
    try:
        if update and update.effective_chat:
            await context.bot.send_message(update.effective_chat.id, "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    except Exception:
        pass

async def show_card(update: Update, ctx: ContextTypes.DEFAULT_TYPE, edit_only_markup: bool = False):
    s = state(ctx)
    text = build_card_text(s)
    kb = card_keyboard(s)

    chat_id = update.effective_chat.id
    last_id = s.get("last_ui_msg_id")
    try:
        if last_id:
            if edit_only_markup:
                await ctx.bot.edit_message_reply_markup(chat_id, last_id, reply_markup=kb)
            else:
                await ctx.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=last_id,
                    text=text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=kb,
                    disable_web_page_preview=True,
                )
        else:
            m = await (update.callback_query.message.reply_text(text, parse_mode=ParseMode.MARKDOWN,
                                                               reply_markup=kb, disable_web_page_preview=True)
                       if update.callback_query else
                       update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN,
                                                 reply_markup=kb, disable_web_page_preview=True))
            s["last_ui_msg_id"] = m.message_id
    except Exception as e:
        log.warning("show_card edit failed: %s", e)
        try:
            m = await ctx.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.MARKDOWN,
                                           reply_markup=kb, disable_web_page_preview=True)
            s["last_ui_msg_id"] = m.message_id
        except Exception as e2:
            log.exception("show_card send failed: %s", e2)

async def on_callback(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = (query.data or "").strip()
    await query.answer()

    s = state(ctx)

    if data.startswith("aspect:"):
        _, val = data.split(":", 1)
        s["aspect"] = "9:16" if val.strip() == "9:16" else "16:9"
        await show_card(update, ctx, edit_only_markup=True)
        return

    if data.startswith("mode:"):
        _, mode = data.split(":", 1)
        s["mode"] = mode
        if mode == "gen_text":
            await query.message.reply_text("–†–µ–∂–∏–º: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É. –ü—Ä–∏—à–ª–∏—Ç–µ –∏–¥–µ—é –∏–ª–∏ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç.")
        elif mode == "gen_photo":
            await query.message.reply_text("–†–µ–∂–∏–º: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ (–∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ ‚Äî –ø–æ–¥–ø–∏—Å—å-–ø—Ä–æ–º–ø—Ç).")
        elif mode == "prompt_master":
            await query.message.reply_text("–ü—Ä–æ–º–ø—Ç-–º–∞—Å—Ç–µ—Ä: –ø—Ä–∏—à–ª–∏—Ç–µ –∏–¥–µ—é –≤ 1‚Äì2 —Ñ—Ä–∞–∑–∞—Ö. –í–µ—Ä–Ω—É –∫–∏–Ω–æ–ø—Ä–æ–º–ø—Ç (EN).")
        elif mode == "chat":
            await query.message.reply_text("–û–±—ã—á–Ω—ã–π —á–∞—Ç: –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–≤–µ—á—É —á–µ—Ä–µ–∑ ChatGPT.")
        await show_card(update, ctx)
        return

    if data == "faq":
        await query.message.reply_text(
            "FAQ:\n‚Ä¢ –†–µ–Ω–¥–µ—Ä Veo3 Fast.\n‚Ä¢ –§–æ—Ä–º–∞—Ç –º–µ–Ω—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ 16:9 / 9:16.\n"
            "‚Ä¢ –í–∏–¥–µ–æ –ø—Ä–∏–¥—ë—Ç —Å—é–¥–∞ –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏. –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ —Å—Ç—Ä–∏–º–∏—Ç—Å—è ‚Äî –ø—Ä–∏—à–ª—é —Ñ–∞–π–ª–æ–º.\n"
            "‚Ä¢ –û—à–∏–±–∫–∏ 401/403/451/500 ‚Äî –ø—Ä–æ–≤–µ—Ä—å –∫–ª—é—á–∏ –∏ –ø—Ä–∞–≤–∞ KIE.",
            reply_markup=main_menu_kb(),
        )
        return

    if data == "back":
        s.update({**DEFAULT_STATE})
        s["aspect"] = "16:9"
        await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
        return

    if data == "card:toggle_photo":
        if s.get("last_image_url"):
            s["last_image_url"] = None
            await query.message.reply_text("–§–æ—Ç–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å —É–¥–∞–ª—ë–Ω.")
            await show_card(update, ctx)
        else:
            await query.message.reply_text(
                "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ. –Ø –≤–æ–∑—å–º—É –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É Telegram (–µ—Å–ª–∏ KIE –ø—Ä–∏–º–µ—Ç).\n"
                "–ò–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º."
            )
        return

    if data == "card:edit_prompt":
        await query.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ (–∏–ª–∏ –∏–¥–µ—é –¥–ª—è Prompt-Master).")
        return

    if data == "card:reset":
        keep_aspect = s.get("aspect", "16:9")
        s.update({**DEFAULT_STATE})
        s["aspect"] = keep_aspect
        await query.message.reply_text("–ö–∞—Ä—Ç–æ—á–∫–∞ –æ—á–∏—â–µ–Ω–∞.")
        await show_card(update, ctx)
        return

    if data == "card:generate":
        if not s.get("last_prompt"):
            await query.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞.")
            return
        if s.get("generating"):
            await query.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –∏–¥—ë—Ç. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            return

        ok, task_id, msg = await asyncio.to_thread(
            submit_kie_generation, s["last_prompt"].strip(), s.get("aspect", "16:9"), s.get("last_image_url")
        )
        if not ok or not task_id:
            await query.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É: {msg}")
            return

        gen_id = uuid.uuid4().hex[:12]
        s["generating"] = True
        s["generation_id"] = gen_id
        log.info("Submitted: chat=%s task=%s gen=%s", update.effective_chat.id, task_id, gen_id)
        await query.message.reply_text(f"üöÄ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ (veo3_fast). taskId={task_id}")

        asyncio.create_task(poll_kie_and_send(update.effective_chat.id, task_id, gen_id, ctx))
        return

async def on_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    s = state(ctx)
    text = (update.message.text or "").trim() if hasattr(str, "trim") else (update.message.text or "").strip()

    # –ü—É–±–ª–∏—á–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    low = text.lower()
    if low.startswith(("http://", "https://")) and low.split("?")[0].endswith((".jpg", ".jpeg", ".png", ".webp")):
        s["last_image_url"] = text.strip()
        await update.message.reply_text("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∞.")
        await show_card(update, ctx)
        return

    mode = s.get("mode")
    if mode == "prompt_master":
        prompt = await oai_prompt_master(text)
        if not prompt:
            await update.message.reply_text("‚ö†Ô∏è Prompt-Master –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        s["last_prompt"] = prompt
        await update.message.reply_text("üß† –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–º–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ä—Ç–æ—á–∫—É.")
        await show_card(update, ctx)
        return

    if mode == "chat":
        if openai is None or not OPENAI_API_KEY:
            await update.message.reply_text("‚ö†Ô∏è ChatGPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç OPENAI_API_KEY).")
            return
        try:
            resp = await asyncio.to_thread(
                openai.ChatCompletion.create,
                model="gpt-4o-mini",
                messages=[{"role": "system", "content": "You are a helpful, concise assistant."},
                          {"role": "user", "content": text}],
                temperature=0.5,
                max_tokens=700,
            )
            answer = resp["choices"][0]["message"]["content"].strip()
            await update.message.reply_text(answer)
        except Exception as e:
            log.exception("Chat error: %s", e)
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ChatGPT.")
        return

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    s["last_prompt"] = text
    await update.message.reply_text("‚úçÔ∏è –ü—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")
    await show_card(update, ctx)

async def on_photo(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    s = state(ctx)
    photos = update.message.photo
    if not photos:
        return
    ph = photos[-1]
    try:
        file = await ctx.bot.get_file(ph.file_id)
        file_path = file.file_path  # photos/file_123.jpg
        if not file_path:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É Telegram.")
            return
        url = tg_file_direct_url(TELEGRAM_TOKEN, file_path)
        log.info("Photo via TG path: ...%s", mask_secret(url, show=10))
        s["last_image_url"] = url
        await update.message.reply_text("üñºÔ∏è –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å.")
        await show_card(update, ctx)
    except Exception as e:
        log.exception("Get photo failed: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ç–µ–∫—Å—Ç–æ–º.")


# ==========================
#   Entry point
# ==========================
def main():
    if not TELEGRAM_TOKEN:
        raise RuntimeError("TELEGRAM_TOKEN is not set")

    if not (KIE_BASE_URL and KIE_GEN_PATH and KIE_STATUS_PATH):
        raise RuntimeError("KIE_* env vars are not properly set")

    app = (
        ApplicationBuilder()
        .token(TELEGRAM_TOKEN)
        .rate_limiter(AIORateLimiter())
        .build()
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(on_callback))
    app.add_handler(MessageHandler(filters.PHOTO, on_photo))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    app.add_error_handler(error_handler)

    log.info(
        "Bot starting. PTB=20.7 | KIE_BASE=%s GEN=%s STATUS=%s HD=%s",
        KIE_BASE_URL, KIE_GEN_PATH, KIE_STATUS_PATH, KIE_HD_PATH
    )
    app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()
