from __future__ import annotations

import logging
from typing import Awaitable, Callable, Optional

from telegram import InlineKeyboardButton, Update
from telegram.ext import ContextTypes

from ui.card import build_card

log = logging.getLogger(__name__)

KB_PREFIX = "KB_"
KB_ROOT = f"{KB_PREFIX}ROOT"
KB_EXAMPLES = f"{KB_PREFIX}EXAMPLES"
KB_TEMPLATES = f"{KB_PREFIX}TEMPLATES"
KB_MINI_LESSONS = f"{KB_PREFIX}MINI_LESSONS"
KB_FAQ = f"{KB_PREFIX}FAQ"
KB_TEMPLATE_PREFIX = f"{KB_PREFIX}TEMPLATE_"
KB_TEMPLATE_VIDEO = f"{KB_TEMPLATE_PREFIX}VIDEO"
KB_TEMPLATE_PHOTO = f"{KB_TEMPLATE_PREFIX}PHOTO"
KB_TEMPLATE_MUSIC = f"{KB_TEMPLATE_PREFIX}MUSIC"
KB_TEMPLATE_BANANA = f"{KB_TEMPLATE_PREFIX}BANANA"
KB_TEMPLATE_AI_PHOTO = f"{KB_TEMPLATE_PREFIX}AI_PHOTO"

_CARD_STATE_KEY = "knowledge_base_card"
_CARD_MSG_KEY = "kb"
_STATE_ACTIVE_CARD_KEY = "active_card"

_send_menu: Optional[Callable[..., Awaitable[Optional[int]]]] = None
_faq_handler: Optional[Callable[[Update, ContextTypes.DEFAULT_TYPE], Awaitable[None]]] = None
_state_getter: Optional[Callable[[ContextTypes.DEFAULT_TYPE], dict]] = None

_TEMPLATE_MESSAGES = {
    KB_TEMPLATE_VIDEO: (
        "üé¨ –®–∞–±–ª–æ–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:\n"
        "1. –û–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤—É—é —Å—Ü–µ–Ω—É –∏ –≥–µ—Ä–æ–µ–≤.\n"
        "2. –î–æ–±–∞–≤—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Å—Ç–∏–ª—å —Å—ä—ë–º–∫–∏ –∏ —Ä–∞–∫—É—Ä—Å—ã.\n"
        "3. –£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∂–µ–ª–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–¥—Ä–∞."
    ),
    KB_TEMPLATE_PHOTO: (
        "üì∏ –®–∞–±–ª–æ–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ:\n"
        "1. –û–ø–∏—à–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ.\n"
        "2. –£—Ç–æ—á–Ω–∏—Ç–µ —Å—Ç–∏–ª—å (—Ä–µ–∞–ª–∏–∑–º, –∫–∏–Ω–æ, fashion –∏ —Ç. –¥.).\n"
        "3. –î–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç–∞–ª–∏ —Å–≤–µ—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –∫–∞—á–µ—Å—Ç–≤–∞."
    ),
    KB_TEMPLATE_MUSIC: (
        "üéß –®–∞–±–ª–æ–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏:\n"
        "1. –ù–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Ç–µ–º–∞ —Ç—Ä–µ–∫–∞.\n"
        "2. –ñ–∞–Ω—Ä, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.\n"
        "3. –ñ–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å—ã –∏–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Ö–æ–∂–∏–µ —Ç—Ä–µ–∫–∏."
    ),
    KB_TEMPLATE_BANANA: (
        "üçå –®–∞–±–ª–æ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Ñ–æ—Ç–æ:\n"
        "1. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å (—Ñ–æ–Ω, –æ–¥–µ–∂–¥–∞, –ø—Ä–µ–¥–º–µ—Ç—ã).\n"
        "2. –£—Ç–æ—á–Ω–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å—Ç–∏–ª—å.\n"
        "3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –∏–ª–∏ —Å–≤–µ—Ç–æ–≤—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã."
    ),
    KB_TEMPLATE_AI_PHOTO: (
        "ü§ñ –®–∞–±–ª–æ–Ω –¥–ª—è –ò–ò-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞:\n"
        "1. –û–ø–∏—à–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: –≤–æ–∑—Ä–∞—Å—Ç, –≤–Ω–µ—à–Ω–æ—Å—Ç—å, –ø–æ–∑—É.\n"
        "2. –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —Å—ä—ë–º–∫–∏ –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∫–∞–¥—Ä–∞.\n"
        "3. –î–æ–±–∞–≤—å—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏: —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∏–≤–∞, —Å–≤–µ—Ç, –∫–∞—á–µ—Å—Ç–≤–æ."
    ),
}


def configure(
    *,
    send_menu: Callable[..., Awaitable[Optional[int]]],
    faq_handler: Optional[Callable[[Update, ContextTypes.DEFAULT_TYPE], Awaitable[None]]] = None,
    state_getter: Optional[Callable[[ContextTypes.DEFAULT_TYPE], dict]] = None,
) -> None:
    global _send_menu
    global _faq_handler
    global _state_getter
    _send_menu = send_menu
    _faq_handler = faq_handler
    _state_getter = state_getter


def _root_rows() -> list[list[InlineKeyboardButton]]:
    return [
        [InlineKeyboardButton("ü™Ñ –ü—Ä–∏–º–µ—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–π", callback_data=KB_EXAMPLES)],
        [InlineKeyboardButton("‚ú® –ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã", callback_data=KB_TEMPLATES)],
        [InlineKeyboardButton("üí° –ú–∏–Ω–∏ –≤–∏–¥–µ–æ —É—Ä–æ–∫–∏", callback_data=KB_MINI_LESSONS)],
        [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data=KB_FAQ)],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back")],
    ]


def _placeholder_rows() -> list[list[InlineKeyboardButton]]:
    return [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=KB_ROOT)]]


def _templates_rows() -> list[list[InlineKeyboardButton]]:
    return [
        [InlineKeyboardButton("üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ", callback_data=KB_TEMPLATE_VIDEO)],
        [InlineKeyboardButton("üì∏ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ", callback_data=KB_TEMPLATE_PHOTO)],
        [InlineKeyboardButton("üéß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏", callback_data=KB_TEMPLATE_MUSIC)],
        [InlineKeyboardButton("üçå –†–µ–¥–∞–∫—Ç–æ—Ä —Ñ–æ—Ç–æ", callback_data=KB_TEMPLATE_BANANA)],
        [InlineKeyboardButton("ü§ñ –ò–ò —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ", callback_data=KB_TEMPLATE_AI_PHOTO)],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=KB_ROOT)],
    ]


def _root_card() -> dict:
    return build_card("üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", _root_rows())


def _examples_card() -> dict:
    return build_card(
        "ü™Ñ –ü—Ä–∏–º–µ—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–π",
        "–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –ª—É—á—à–∏–µ –ø—Ä–∏–º–µ—Ä—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–µ–∂–∏–º—É.",
        _placeholder_rows(),
    )


def _lessons_card() -> dict:
    return build_card(
        "üí° –ú–∏–Ω–∏ –≤–∏–¥–µ–æ —É—Ä–æ–∫–∏",
        "–ö–æ—Ä–æ—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç —Ç—É—Ç.",
        _placeholder_rows(),
    )


def _templates_card() -> dict:
    return build_card("‚ú® –ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã", "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", _templates_rows())


async def _send_card(
    ctx: ContextTypes.DEFAULT_TYPE,
    chat_id: int,
    card: dict,
    *,
    log_label: str,
    active_card: Optional[str] = None,
    fallback_message_id: Optional[int] = None,
) -> Optional[int]:
    if _send_menu is None:
        raise RuntimeError("knowledge_base.send_menu is not configured")

    if _state_getter is None:
        raise RuntimeError("knowledge_base.state_getter is not configured")

    state_dict = _state_getter(ctx)
    payload = {
        "ctx": ctx,
        "chat_id": chat_id,
        "text": card["text"],
        "reply_markup": card["reply_markup"],
        "state_key": _CARD_STATE_KEY,
        "msg_ids_key": _CARD_MSG_KEY,
        "state_dict": state_dict,
        "fallback_message_id": fallback_message_id,
        "parse_mode": card.get("parse_mode"),
        "disable_web_page_preview": card.get("disable_web_page_preview", True),
        "log_label": log_label,
    }
    result = await _send_menu(**payload)
    if active_card is not None:
        try:
            state_dict[_STATE_ACTIVE_CARD_KEY] = active_card
        except Exception:
            pass
    return result


async def open_root(
    ctx: ContextTypes.DEFAULT_TYPE,
    chat_id: int,
    *,
    suppress_nav: bool = False,
    fallback_message_id: Optional[int] = None,
) -> Optional[int]:
    log.info(
        "[KB] open",
        extra={"chat_id": chat_id, "suppress_nav": suppress_nav},
    )
    return await _send_card(
        ctx,
        chat_id,
        _root_card(),
        log_label="ui.kb.root",
        active_card="kb:root",
        fallback_message_id=fallback_message_id,
    )


async def show_examples(ctx: ContextTypes.DEFAULT_TYPE, chat_id: int) -> Optional[int]:
    return await _send_card(
        ctx,
        chat_id,
        _examples_card(),
        log_label="ui.kb.examples",
        active_card="kb:examples",
    )


async def show_lessons(ctx: ContextTypes.DEFAULT_TYPE, chat_id: int) -> Optional[int]:
    return await _send_card(
        ctx,
        chat_id,
        _lessons_card(),
        log_label="ui.kb.lessons",
        active_card="kb:lessons",
    )


async def show_templates(ctx: ContextTypes.DEFAULT_TYPE, chat_id: int) -> Optional[int]:
    log.info("[KB] open templates", extra={"chat_id": chat_id})
    return await _send_card(
        ctx,
        chat_id,
        _templates_card(),
        log_label="ui.kb.templates",
        active_card="kb:templates",
    )


async def handle_callback(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if query is None or query.data is None:
        return

    data = query.data
    chat = update.effective_chat or (query.message.chat if query.message else None)
    chat_id = chat.id if chat else None
    if chat_id is None:
        await query.answer()
        return

    if data == KB_ROOT:
        await query.answer()
        await open_root(ctx, chat_id)
        return
    if data == KB_EXAMPLES:
        await query.answer()
        await show_examples(ctx, chat_id)
        return
    if data == KB_TEMPLATES:
        await query.answer()
        await show_templates(ctx, chat_id)
        return
    if data == KB_MINI_LESSONS:
        await query.answer()
        await show_lessons(ctx, chat_id)
        return
    if data == KB_FAQ:
        await query.answer()
        await open_root(ctx, chat_id)
        if callable(_faq_handler):
            await _faq_handler(update, ctx)
        if _state_getter is not None:
            try:
                _state_getter(ctx)[_STATE_ACTIVE_CARD_KEY] = "kb:faq"
            except Exception:
                pass
        return
    if data in _TEMPLATE_MESSAGES:
        await query.answer()
        await ctx.bot.send_message(chat_id=chat_id, text=_TEMPLATE_MESSAGES[data])
        return

    if data.startswith(KB_TEMPLATE_PREFIX):
        log.warning("[KB] unknown template", extra={"chat_id": chat_id, "data": data})
        await query.answer("–®–∞–±–ª–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return

    if data.startswith(KB_PREFIX):
        log.warning("[KB] unknown callback", extra={"chat_id": chat_id, "data": data})
        await query.answer()


__all__ = [
    "KB_EXAMPLES",
    "KB_FAQ",
    "KB_MINI_LESSONS",
    "KB_PREFIX",
    "KB_ROOT",
    "KB_TEMPLATE_PREFIX",
    "KB_TEMPLATES",
    "configure",
    "handle_callback",
    "open_root",
    "show_examples",
    "show_lessons",
    "show_templates",
]
