"""Prompt-Master handlers and auto-generation helpers."""

from __future__ import annotations

import html
import json
import logging
import re
from dataclasses import dataclass
from typing import Dict, Iterable, Tuple

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from keyboards import CB_PM_PREFIX, prompt_master_keyboard

logger = logging.getLogger(__name__)

PM_HINT = "üß† *Prompt-Master*\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:"

CYRILLIC_RE = re.compile(r"[–∞-—è—ë]", re.IGNORECASE)

PHOTO_KEYWORDS = (
    "–æ–∂–∏–≤–∏",
    "–æ–∂–∏–≤–ª–µ–Ω–∏–µ",
    "talking photo",
    "animate photo",
    "–∂–∏–≤–æ–µ —Ñ–æ—Ç–æ",
    "make it talk",
)
BANANA_KEYWORDS = (
    "banana",
    "—Ä–µ—Ç—É—à",
    "—Ä–µ—Ç—É—à—å",
    "–∑–∞–º–µ–Ω–∏ —Ñ–æ–Ω",
    "edit photo",
    "photo edit",
    "—Ä–µ–¥–∞–∫—Ç",
)
MJ_KEYWORDS = (
    "midjourney",
    " mj",
    "#mj",
    "–∏–∑–æ–±—Ä–∞–∂",
    "–∫–∞—Ä—Ç–∏–Ω",
    "artwork",
    "poster",
    "concept art",
)
SUNO_KEYWORDS = (
    "suno",
    "–ø–µ—Å–Ω—è",
    "song",
    "lyrics",
    "rap",
    "–º—É–∑—ã–∫",
    "—Ç—Ä–µ–∫",
    "–≥–∏–º–Ω",
)
VIDEO_KEYWORDS = (
    "veo",
    "video",
    "clip",
    "—Ä–æ–ª–∏–∫",
    "—Ç—Ä–µ–π–ª–µ—Ä",
    "–≤–∏–¥–µ–æ",
    "cinematic",
)

CAMERA_HINTS = (
    ("drone", ("drone")),
    ("–∞—ç—Ä–æ", ("drone")),
    ("–∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω", ("close-up")),
    ("close-up", ("close-up")),
    ("–ø–æ—Ä—Ç—Ä–µ—Ç", ("portrait lens")),
    ("—à–∏—Ä–æ–∫–æ—É–≥–æ–ª—å–Ω", ("wide-angle lens")),
    ("wide", ("wide-angle lens")),
)

LOW_LIGHT_HINTS = (
    "–Ω–æ—á",
    "night",
    "–Ω–µ–æ–Ω",
    "neon",
    "–ª—É–Ω–∞",
    "moon",
)

WARM_LIGHT_HINTS = (
    "–∑–∞–∫–∞—Ç",
    "sunset",
    "golden hour",
    "—Ç–µ–ø–ª",
)


@dataclass
class PromptResult:
    """Container with generated prompt data."""

    engine: str
    raw: str
    is_json: bool


ENGINE_DISPLAY: Dict[str, Dict[str, str]] = {
    "veo": {"ru": "VEO", "en": "VEO"},
    "mj": {"ru": "Midjourney", "en": "Midjourney"},
    "banana": {"ru": "Banana", "en": "Banana"},
    "photo_live": {"ru": "VEO –æ–∂–∏–≤–ª–µ–Ω–∏–µ", "en": "VEO Photo Live"},
    "suno": {"ru": "Suno", "en": "Suno"},
}


async def prompt_master_open(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    *,
    from_callback: bool = False,
) -> None:
    """Send or edit the Prompt-Master root menu."""

    message = update.effective_message
    if message is not None:
        await message.reply_text(
            PM_HINT,
            reply_markup=prompt_master_keyboard(),
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
        )
        return

    query = update.callback_query
    if query is None:
        return

    if not from_callback:
        await query.answer()

    await query.edit_message_text(
        PM_HINT,
        reply_markup=prompt_master_keyboard(),
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True,
    )


async def prompt_master_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle Prompt-Master keyboard interactions."""

    query = update.callback_query
    if query is None or query.data is None:
        return

    user_id = update.effective_user.id if update.effective_user else None
    logger.info("prompt_master.callback | user_id=%s data=%s", user_id, query.data)

    await query.answer()

    code = query.data.removeprefix(CB_PM_PREFIX)
    if code == "back":
        await prompt_master_open(update, context, from_callback=True)
        return

    feature_name = {
        "video": "üé¨ –í–∏–¥–µ–æ–ø—Ä–æ–º–ø—Ç (VEO)",
        "mj_gen": "üñºÔ∏è –ü—Ä–æ–º–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ (MJ)",
        "photo_live": "ü´• –û–∂–∏–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ (VEO)",
        "banana_edit": "‚úÇÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ (Banana)",
        "suno_lyrics": "üéµ –¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ (Suno)",
    }.get(code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    await query.edit_message_text(
        f"{feature_name}\n\n‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞. –ê –ø–æ–∫–∞ ‚Äî –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É —Ç–µ–∫—Å—Ç–æ–º, —è –ø–æ–º–æ–≥—É —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç.",
        reply_markup=prompt_master_keyboard(),
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True,
    )


def _normalize_text(text: str) -> str:
    return " ".join(text.strip().split())


def detect_language(text: str) -> str:
    """Return `ru` if Cyrillic letters found, otherwise `en`."""

    return "ru" if CYRILLIC_RE.search(text or "") else "en"


def _has_keyword(text: str, keywords: Iterable[str]) -> bool:
    lowered = text.lower()
    return any(keyword in lowered for keyword in keywords)


def classify_prompt_engine(text: str) -> str:
    """Classify user request into one of supported engines."""

    lowered = text.lower()
    if "#veo" in lowered:
        return "veo"
    if _has_keyword(lowered, SUNO_KEYWORDS):
        return "suno"
    if _has_keyword(lowered, BANANA_KEYWORDS):
        return "banana"
    if _has_keyword(lowered, PHOTO_KEYWORDS):
        return "photo_live"
    if "#mj" in lowered or " mj" in lowered:
        return "mj"
    if _has_keyword(lowered, MJ_KEYWORDS):
        return "mj"
    if _has_keyword(lowered, VIDEO_KEYWORDS):
        return "veo"
    return "veo"


def _choose_camera_detail(text: str, lang: str) -> str:
    lowered = text.lower()
    for needle, camera_value in CAMERA_HINTS:
        if needle in lowered:
            choice = camera_value[0]
            break
    else:
        choice = "steadycam push-in" if lang == "en" else "—Å—Ç–µ–¥–∏–∫–∞–º —Å–æ –ø–ª–∞–≤–Ω—ã–º –≤—ä–µ–∑–¥–æ–º"
    if lang == "ru":
        if choice == "drone":
            return "–î—Ä–æ–Ω —Å –ø–ª–∞–≤–Ω—ã–º –ø—Ä–æ–ª—ë—Ç–æ–º"
        if choice == "close-up":
            return "–ö—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω —Å –º—è–≥–∫–∏–º —Ñ–æ–∫—É—Å–æ–º"
        if choice == "portrait lens":
            return "–ü–æ—Ä—Ç—Ä–µ—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç–∏–≤ 85mm, –º–µ–ª–∫–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∑–∫–æ—Å—Ç–∏"
        if choice == "wide-angle lens":
            return "–®–∏—Ä–æ–∫–æ—É–≥–æ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç–∏–≤ 24mm –¥–ª—è –¥–∏–Ω–∞–º–∏–∫–∏ –∫–∞–¥—Ä–∞"
        return "–°—Ç–µ–¥–∏–∫–∞–º —Å –ø–ª–∞–≤–Ω—ã–º –≤—ä–µ–∑–¥–æ–º –≤–ø–µ—Ä—ë–¥"
    if choice == "drone":
        return "Drone sweep with smooth glide"
    if choice == "close-up":
        return "Close-up with delicate focus"
    if choice == "portrait lens":
        return "Portrait lens 85mm, shallow depth of field"
    if choice == "wide-angle lens":
        return "Wide-angle 24mm lens for energy"
    return "Steadycam push-in"


def _choose_lighting_detail(text: str, lang: str) -> str:
    lowered = text.lower()
    if _has_keyword(lowered, LOW_LIGHT_HINTS):
        return (
            "–ù–µ–æ–Ω–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–≤—ã–π —Å–≤–µ—Ç, –º—è–≥–∫–∏–µ —Ä–µ—Ñ–ª–µ–∫—Å—ã –∏ –¥—ã–º–∫–∞"
            if lang == "ru"
            else "Neon rim light with gentle reflections and haze"
        )
    if _has_keyword(lowered, WARM_LIGHT_HINTS):
        return (
            "–¢—ë–ø–ª—ã–π –∑–∞–∫–∞—Ç–Ω—ã–π —Å–≤–µ—Ç —Å –¥–ª–∏–Ω–Ω—ã–º–∏ —Ç–µ–Ω—è–º–∏"
            if lang == "ru"
            else "Warm golden-hour glow with elongated shadows"
        )
    return (
        "–ú—è–≥–∫–∏–π —Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π —Å–≤–µ—Ç —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è"
        if lang == "ru"
        else "Soft diffused light with a spotlight on the subject"
    )


def _choose_style_detail(lang: str) -> str:
    return (
        "–ì–∏–ø–µ—Ä—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π —Å—Ç–∏–ª—å, —Å–æ—á–Ω—ã–µ —Ü–≤–µ—Ç–∞"
        if lang == "ru"
        else "Hyper-realistic cinematic look with rich color grading"
    )


def _choose_audio_detail(text: str, lang: str) -> str:
    lowered = text.lower()
    if "ambient" in lowered or "—ç–º–±–∏–µ–Ω—Ç" in lowered:
        return (
            "–≠–º–±–∏–µ–Ω—Ç–Ω—ã–π –∑–≤—É–∫–æ–≤–æ–π —Ñ–æ–Ω —Å –º—è–≥–∫–∏–º —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–æ–º"
            if lang == "ru"
            else "Ambient soundscape with gentle synth pads"
        )
    if "rap" in lowered or "—Ä—ç–ø" in lowered:
        return (
            "–†–∏—Ç–º–∏—á–Ω—ã–π –±–∏—Ç —Å –ª—ë–≥–∫–∏–º –±–∞—Å–æ–º"
            if lang == "ru"
            else "Rhythmic beat with subtle bass"
        )
    return (
        "–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ —Ñ–æ–ª–∏ –∏ –ª—ë–≥–∫–∏–π —ç–º–±–∏–µ–Ω—Ç"
        if lang == "ru"
        else "Atmospheric foley with light ambient layers"
    )


def _enhance_composition(lang: str) -> str:
    return (
        "–¢—Ä—ë—Ö–ø–ª–∞–Ω–æ–≤–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è, –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω"
        if lang == "ru"
        else "Layered three-plane composition with a defined foreground"
    )


def _format_json_block(raw: str) -> str:
    return f"<blockquote><pre>{html.escape(raw)}</pre></blockquote>"


def _format_text_block(raw: str) -> str:
    escaped = html.escape(raw).replace("\n", "<br/>")
    return f"<blockquote>{escaped}</blockquote>"


def _header_for_engine(engine: str, lang: str) -> str:
    name = ENGINE_DISPLAY.get(engine, {}).get(lang, engine.upper())
    if lang == "ru":
        return f"<b>–ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è {name}</b>"
    return f"<b>Ready prompt for {name}</b>"


def _build_buttons(engine: str, lang: str) -> InlineKeyboardMarkup:
    display = ENGINE_DISPLAY.get(engine, {}).get(lang, engine.upper())
    if lang == "ru":
        copy_text = "üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å"
        insert_text = f"‚ö° –í—Å—Ç–∞–≤–∏—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–∫—É {display}"
    else:
        copy_text = "üìã Copy"
        insert_text = f"‚ö° Insert into {display} card"
    return InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton(copy_text, callback_data=f"pm:copy:{engine}"),
                InlineKeyboardButton(insert_text, callback_data=f"pm:insert:{engine}"),
            ]
        ]
    )


def _build_veo_json(text: str, lang: str) -> PromptResult:
    camera_detail = _choose_camera_detail(text, lang)
    lighting_detail = _choose_lighting_detail(text, lang)
    composition = _enhance_composition(lang)
    style_detail = _choose_style_detail(lang)
    audio_detail = _choose_audio_detail(text, lang)
    cleaned = _normalize_text(text)
    if lang == "ru":
        payload = {
            "scene": f"{cleaned}. {composition}.",
            "camera": camera_detail,
            "action": f"–ì–µ—Ä–æ–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç –∑–∞–¥—É–º–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –¥–∏–Ω–∞–º–∏–∫–∞ –¥–µ—Ä–∂–∏—Ç –≤–Ω–∏–º–∞–Ω–∏–µ. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 8 —Å–µ–∫—É–Ω–¥.",
            "lighting": lighting_detail,
            "style": style_detail,
            "audio": audio_detail,
        }
    else:
        payload = {
            "scene": f"{cleaned}. {composition}.",
            "camera": camera_detail,
            "action": "Carry out the described idea with purposeful motion. Duration: 8 seconds.",
            "lighting": lighting_detail,
            "style": style_detail,
            "audio": audio_detail,
        }
    return PromptResult("veo", json.dumps(payload, ensure_ascii=False, indent=2), True)


def _build_mj_json(text: str, lang: str) -> PromptResult:
    camera_detail = _choose_camera_detail(text, lang)
    lighting_detail = _choose_lighting_detail(text, lang)
    style_detail = _choose_style_detail(lang)
    cleaned = _normalize_text(text)
    if lang == "ru":
        payload = {
            "prompt": f"{cleaned}, –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è, —á–µ—Ç—ã—Ä–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏",
            "style": f"{style_detail}, –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—É—Ä—ã",
            "camera": camera_detail,
            "lighting": lighting_detail,
        }
    else:
        payload = {
            "prompt": f"{cleaned}, cinematic detail, four distinct variations",
            "style": f"{style_detail}, natural textures",
            "camera": camera_detail,
            "lighting": lighting_detail,
        }
    return PromptResult("mj", json.dumps(payload, ensure_ascii=False, indent=2), True)


def _build_face_edit_prompt(text: str, lang: str, engine: str) -> PromptResult:
    camera_detail = _choose_camera_detail(text, lang)
    lighting_detail = _choose_lighting_detail(text, lang)
    composition = _enhance_composition(lang)
    cleaned = _normalize_text(text)
    safety = "keep the real face unchanged, no distortion, no extra limbs, natural details"
    if lang == "ru":
        raw = (
            f"–ò–¥–µ—è: {cleaned}.\n"
            f"–ö–∞–º–µ—Ä–∞: {camera_detail}.\n"
            f"–ö–æ–º–ø–æ–∑–∏—Ü–∏—è: {composition}.\n"
            f"–°–≤–µ—Ç: {lighting_detail}.\n"
            f"–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {safety}."
        )
    else:
        raw = (
            f"Concept: {cleaned}.\n"
            f"Camera: {camera_detail}.\n"
            f"Composition: {composition}.\n"
            f"Lighting: {lighting_detail}.\n"
            f"Safety: {safety}."
        )
    return PromptResult(engine, raw, False)


def _detect_mood(text: str) -> Tuple[str, str]:
    lowered = text.lower()
    if any(word in lowered for word in ("sad", "–≥—Ä—É—Å—Ç—å", "melancholy", "–ø–µ—á–∞–ª—å")):
        return "ambient", "melancholic"
    if any(word in lowered for word in ("—ç–Ω–µ—Ä–≥", "drive", "—ç–Ω–µ—Ä–≥–∏—è", "upbeat", "—Ä–∞–¥–æ—Å—Ç")):
        return "synthwave", "upbeat"
    if any(word in lowered for word in ("dark", "–º—Ä–∞—á", "—Ç—Ä–µ–≤–æ–∂")):
        return "dark electronic", "tense"
    return "cinematic pop", "emotional"


def _build_suno_prompt(text: str, lang: str) -> PromptResult:
    genre, mood = _detect_mood(text)
    cleaned = text.strip()
    has_lyrics = "\n" in cleaned or len(cleaned.split()) > 30
    instruments = (
        "–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä—ã, —É–¥–∞—Ä–Ω—ã–µ, –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ –≥–∏—Ç–∞—Ä—ã"
        if lang == "ru"
        else "Synths, drums, atmospheric guitars"
    )
    if lang == "ru":
        prompt_lines = [
            f"–ñ–∞–Ω—Ä: {genre if genre != 'cinematic pop' else '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π –ø–æ–ø'}",
            f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood if mood != 'emotional' else '—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ'}",
            f"–°—é–∂–µ—Ç: {cleaned if not has_lyrics else '–∏—Å—Ç–æ—Ä–∏—è –∏ –æ–±—Ä–∞–∑ –æ–ø–∏—Å–∞–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ –Ω–∏–∂–µ'}",
            f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {instruments}",
        ]
        if has_lyrics:
            prompt_lines.append("–ö—É–ø–ª–µ—Ç/–ø—Ä–∏–ø–µ–≤:")
            prompt_lines.append(cleaned)
    else:
        prompt_lines = [
            f"Genre: {genre}",
            f"Mood: {mood}",
            f"Story: {cleaned if not has_lyrics else 'use the lyrics below as verse/chorus'}",
            f"Instruments: {instruments}",
        ]
        if has_lyrics:
            prompt_lines.append("Lyrics:")
            prompt_lines.append(cleaned)
    raw = "\n".join(prompt_lines)
    return PromptResult("suno", raw, False)


def build_prompt_result(text: str) -> Tuple[PromptResult, str]:
    """Build prompt for given text returning result and language."""

    lang = detect_language(text)
    engine = classify_prompt_engine(text)
    if engine == "veo":
        result = _build_veo_json(text, lang)
    elif engine == "mj":
        result = _build_mj_json(text, lang)
    elif engine == "banana":
        result = _build_face_edit_prompt(text, lang, "banana")
    elif engine == "photo_live":
        result = _build_face_edit_prompt(text, lang, "photo_live")
    else:
        result = _build_suno_prompt(text, lang)
    return result, lang


def format_prompt_message(result: PromptResult, lang: str) -> str:
    """Return HTML-formatted message ready for Telegram."""

    header = _header_for_engine(result.engine, lang)
    block = _format_json_block(result.raw) if result.is_json else _format_text_block(result.raw)
    return f"{header}\n{block}"


async def prompt_master_process(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Process user free-form text and reply with generated prompt."""

    message = update.message
    if message is None or not isinstance(message.text, str):
        return
    text = message.text.strip()
    if not text:
        return

    try:
        await message.delete()
    except Exception:
        logger.debug("prompt_master.delete_failed", exc_info=True)

    result, lang = build_prompt_result(text)
    formatted = format_prompt_message(result, lang)
    markup = _build_buttons(result.engine, lang)

    try:
        await message.reply_text(
            formatted,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
            reply_markup=markup,
        )
    except Exception:
        logger.exception("prompt_master.reply_failed")

