"""Prompt-Master MVP handlers."""

from __future__ import annotations

import logging

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes

from keyboards import CB_PM_PREFIX, prompt_master_keyboard

logger = logging.getLogger(__name__)

PM_HINT = "üß† *Prompt-Master*\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:"


async def prompt_master_open(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    *,
    from_callback: bool = False,
) -> None:
    """Send or edit the Prompt-Master root menu."""

    message = update.effective_message
    if message is not None:
        await message.reply_text(
            PM_HINT,
            reply_markup=prompt_master_keyboard(),
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
        )
        return

    query = update.callback_query
    if query is None:
        return

    if not from_callback:
        await query.answer()

    await query.edit_message_text(
        PM_HINT,
        reply_markup=prompt_master_keyboard(),
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True,
    )


async def prompt_master_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle Prompt-Master keyboard interactions."""

    query = update.callback_query
    if query is None or query.data is None:
        return

    user_id = update.effective_user.id if update.effective_user else None
    logger.info("prompt_master.callback | user_id=%s data=%s", user_id, query.data)

    await query.answer()

    code = query.data.removeprefix(CB_PM_PREFIX)
    if code == "back":
        await prompt_master_open(update, context, from_callback=True)
        return

    feature_name = {
        "video": "üé¨ –í–∏–¥–µ–æ–ø—Ä–æ–º–ø—Ç (VEO)",
        "mj_gen": "üñºÔ∏è –ü—Ä–æ–º–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–æ—Ç–æ (MJ)",
        "photo_live": "ü´• –û–∂–∏–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ (VEO)",
        "banana_edit": "‚úÇÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ (Banana)",
        "suno_lyrics": "üéµ –¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ (Suno)",
    }.get(code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    await query.edit_message_text(
        f"{feature_name}\n\n‚öôÔ∏è –§—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞. –ê –ø–æ–∫–∞ ‚Äî –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É —Ç–µ–∫—Å—Ç–æ–º, —è –ø–æ–º–æ–≥—É —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç.",
        reply_markup=prompt_master_keyboard(),
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True,
    )
