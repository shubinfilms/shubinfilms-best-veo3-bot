from __future__ import annotations

import logging
from typing import Any, Mapping, Optional

from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import TelegramError

logger = logging.getLogger("user-errors")

_TEMPLATES: dict[str, str] = {
    "content_policy": (
        "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ—Ö–æ–∂–µ, –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π –∏–ª–∏ "
        "–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–æ—á–µ –∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–µ–µ."
    ),
    "timeout": (
        "–°–µ—Ä–≤–∏—Å —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—á–∞–µ—Ç –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–≤—Ç–æ—Ä–∏—Ç—å¬ª –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    ),
    "backend_fail": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
    "invalid_input": "–ù—É–∂–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–º—Ç. –ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.",
}


async def send_user_error(
    ctx: Any,
    kind: str,
    *,
    details: Optional[Mapping[str, Any]] = None,
    retry_cb: Optional[str] = None,
) -> None:
    """Send a friendly error message to the user and log the event."""

    template = _TEMPLATES.get(kind, _TEMPLATES["backend_fail"])
    chat_id = None
    user_id = None
    mode = None
    reason = None
    req_id = None

    if details:
        chat_id = details.get("chat_id")
        user_id = details.get("user_id")
        mode = details.get("mode")
        reason = details.get("reason")
        req_id = details.get("req_id")

    logger.info(
        "ERR_USER_SENT",
        extra={
            "mode": mode,
            "kind": kind,
            "reason": reason,
            "user_id": user_id,
            "chat_id": chat_id,
            "req_id": req_id,
        },
    )

    bot = getattr(ctx, "bot", None)
    if bot is None or chat_id is None:
        return

    reply_markup = None
    if retry_cb:
        reply_markup = InlineKeyboardMarkup(
            [[InlineKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=retry_cb)]]
        )

    try:
        await bot.send_message(chat_id=chat_id, text=template, reply_markup=reply_markup)
    except TelegramError:
        logger.exception(
            "user_error.send_fail", extra={"chat_id": chat_id, "kind": kind, "mode": mode}
        )
    except Exception:  # pragma: no cover - defensive guard
        logger.exception(
            "user_error.send_fail", extra={"chat_id": chat_id, "kind": kind, "mode": mode}
        )
