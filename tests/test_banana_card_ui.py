import importlib
import sys
from pathlib import Path

import pytest

ROOT = Path(__file__).resolve().parents[1]
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))


@pytest.fixture
def bot_module(monkeypatch):
    monkeypatch.setenv("TELEGRAM_TOKEN", "dummy-token")
    monkeypatch.setenv("SUNO_API_BASE", "https://example.com")
    monkeypatch.setenv("SUNO_API_TOKEN", "test-token")
    monkeypatch.setenv("LEDGER_BACKEND", "memory")
    monkeypatch.setenv("DATABASE_URL", "postgres://test")
    module = importlib.import_module("bot")
    return importlib.reload(module)


def test_banana_card_compact_summary(bot_module):
    state = {"banana_images": [{"url": "https://example.com"}], "last_prompt": "", "banana_balance": 15}

    text = bot_module.banana_card_text(state)

    assert "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤" not in text
    assert "üì∏ –§–æ—Ç–æ: <b>1/4</b> ‚Ä¢ –ü—Ä–æ–º–ø—Ç: <b>–Ω–µ—Ç</b>" in text
    assert "‚úèÔ∏è –ü—Ä–æ–º–ø—Ç: ‚Äî" in text
    assert "banana_helper_line" not in state


def test_banana_card_shows_prompt(bot_module):
    state = {"banana_images": [], "last_prompt": "–∑–∞–º–µ–Ω–∏ —Ñ–æ–Ω –Ω–∞ —Å—Ç—É–¥–∏–π–Ω—ã–π", "banana_balance": 575}

    text = bot_module.banana_card_text(state)

    assert '‚úèÔ∏è –ü—Ä–æ–º–ø—Ç: "–∑–∞–º–µ–Ω–∏ —Ñ–æ–Ω –Ω–∞ —Å—Ç—É–¥–∏–π–Ω—ã–π"' in text
    assert "–ü—Ä–æ–º–ø—Ç: <b>–µ—Å—Ç—å</b>" in text


def test_banana_keyboard_layout(bot_module):
    keyboard = bot_module.banana_kb()
    rows = keyboard.inline_keyboard

    assert rows[0][0].text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"
    assert rows[0][1].text == "‚úèÔ∏è –ü—Ä–æ–º–ø—Ç"
    assert rows[0][2].text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å"
    assert len(rows[1]) == 1 and rows[1][0].text == "‚ú® –ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã"
    assert len(rows[2]) == 1 and rows[2][0].text == "üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"
    assert rows[3][0].text == "üîÑ –î–≤–∏–∂–æ–∫"
    assert rows[3][1].text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥"
