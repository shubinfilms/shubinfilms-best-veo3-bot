from __future__ import annotations

from time import time
from typing import Any, Optional

from telegram.error import BadRequest


COMMAND_PREFIX = "/"

# –ö–æ—Ä–æ—Ç–∫–∏–π —Å–ª–æ–≤–∞—Ä—å –ª–µ–π–±–ª–æ–≤ –∫–Ω–æ–ø–æ–∫ (—Ç–æ, —á—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø–æ–ø–∞–¥–∞—Ç—å –≤ –ø—Ä–æ–º–ø—Ç)
BUTTON_LABELS = {
    "üé¨ –ì–ï–ù–ï–†–ê–¶–ò–Ø –í–ò–î–ï–û",
    "üé® –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô",
    "üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏",
    "üß† Prompt-Master",
    "üíé –ë–∞–ª–∞–Ω—Å",
    "üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç",
    "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
    "–ù–∞–∑–∞–¥",
    "–û—Ç–º–µ–Ω–∏—Ç—å",
    "–°–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç",
    "–î–æ–±–∞–≤–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å",
    "Fast ‚úÖ",
    "Quality üíé",
    "16:9 ‚úÖ",
    "9:16",
    "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (Midjourney)",
    "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ (Banana)",
    "–û–∂–∏–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ",
    "–¢—Ä–µ–∫ (Suno)",
    "–í–∏–¥–µ–æ–ø—Ä–æ–º–ø—Ç (VEO)",
    "–°–º–µ–Ω–∏—Ç—å –¥–≤–∏–∂–æ–∫",
    "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π (16:9)",
    "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π (9:16)",
}


def is_command_text(text: Optional[str]) -> bool:
    return bool(text) and text.strip().startswith(COMMAND_PREFIX)


def is_button_label(text: Optional[str]) -> bool:
    if not text:
        return False
    t = text.strip()
    return bool(t) and t in BUTTON_LABELS


def should_capture_to_prompt(text: Optional[str]) -> bool:
    """–†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç (–Ω–µ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–µ –ª–µ–π–±–ª—ã)."""

    if not text:
        return False
    stripped = text.strip()
    if not stripped:
        return False
    if is_command_text(stripped):
        return False
    if is_button_label(stripped):
        return False
    return True


# –ø—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö edit
_last_edit_cache: dict[tuple[int, int], dict[str, Any]] = {}


def safe_edit(bot: Any, chat_id: int, message_id: int, text: str, **kwargs: Any):
    key = (int(chat_id), int(message_id))
    entry = _last_edit_cache.get(key)
    now = time()
    if entry and entry.get("text") == text and now - entry.get("ts", 0.0) < 30:
        return entry.get("result")

    try:
        result = bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, **kwargs)
    except BadRequest as exc:
        if "message is not modified" in str(exc).lower():
            _last_edit_cache[key] = {"text": text, "ts": now, "result": None}
            return None
        raise
    else:
        _last_edit_cache[key] = {"text": text, "ts": now, "result": result}
        return result


__all__ = [
    "COMMAND_PREFIX",
    "BUTTON_LABELS",
    "is_command_text",
    "is_button_label",
    "should_capture_to_prompt",
    "safe_edit",
]

