from __future__ import annotations

import re
import unicodedata
from time import time
from typing import Any, Optional, Set

from telegram.error import BadRequest


COMMAND_PREFIX = "/"

_SPACE_RE = re.compile(r"\s+")
_VARIATION_SELECTOR_RE = re.compile(r"[\u200d\ufe00-\ufe0f]")


def _normalize_button_text(text: str) -> str:
    normalized = unicodedata.normalize("NFKC", text or "")
    normalized = _VARIATION_SELECTOR_RE.sub("", normalized)
    normalized = _SPACE_RE.sub(" ", normalized).strip()
    return normalized


def _casefold(text: str) -> str:
    return _normalize_button_text(text).casefold()


LABEL_ALIASES: dict[str, str] = {}
_EXACT_LABELS: Set[str] = set()
_PREFIX_LABELS: Set[str] = set()
_MENU_LABELS: Set[str] = set()


def _register_label(canonical: str, *aliases: str, prefix: bool = False) -> None:
    if not canonical:
        return
    _MENU_LABELS.add(_normalize_button_text(canonical))
    all_variants = (canonical, *aliases)
    for variant in all_variants:
        if not variant:
            continue
        folded = _casefold(variant)
        if not folded:
            continue
        LABEL_ALIASES[folded] = canonical
        if prefix:
            _PREFIX_LABELS.add(folded)
        else:
            _EXACT_LABELS.add(folded)


_register_label("üé¨ –ì–ï–ù–ï–†–ê–¶–ò–Ø –í–ò–î–ï–û", "üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ", "üé¨ –í–∏–¥–µ–æ", "üé¨ –í–∏–¥–µ–æ (VEO)", "üé¨ Video", "üé¨ Video prompt (VEO)", prefix=True)
_register_label("üé® –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô", "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (MJ)", "üé® Midjourney", "üé® Image prompt (MJ)", prefix=True)
_register_label("üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏", "üéµ –ú—É–∑—ã–∫–∞", "üéµ –ú—É–∑—ã–∫–∞ (Suno)", "üéµ Track (Suno)", "üéµ Suno", prefix=True)
_register_label("üß† Prompt-Master", "üß†", prefix=True)
_register_label("üíé –ë–∞–ª–∞–Ω—Å", "üíé", prefix=True)
_register_label("üí¨ –û–±—ã—á–Ω—ã–π —á–∞—Ç", "üí¨", prefix=True)
_register_label("üè† –í –º–µ–Ω—é", "‚¨ÖÔ∏è –í –º–µ–Ω—é")
_register_label("‚ÑπÔ∏è FAQ", "‚ÑπÔ∏è –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã", "‚ö° –¢–æ–∫–µ–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã")
_register_label("üçå Banana JSON", "üé® Midjourney JSON", prefix=True)
_register_label("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", "üìã Copy")
_register_label("‚¨áÔ∏è –í—Å—Ç–∞–≤–∏—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–∫—É", "‚¨áÔ∏è Insert into", prefix=True)
_register_label("üîÅ –°–º–µ–Ω–∏—Ç—å –¥–≤–∏–∂–æ–∫", "üîÅ Switch engine", prefix=True)
_register_label("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
_register_label("–û—Ç–º–µ–Ω–∏—Ç—å")
_register_label("–ù–∞–∑–∞–¥")
_register_label("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
_register_label("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–≤ –≥–ª–∞–≤–Ω–æ–µ)", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª–∞–º", "‚¨ÖÔ∏è Back", "‚óÄÔ∏è –ù–∞–∑–∞–¥")
_register_label("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", "üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å")
_register_label("üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥")
_register_label("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë")
_register_label("–°–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç")
_register_label("–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π (16:9)")
_register_label("–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π (9:16)")
_register_label("16:9")
_register_label("9:16")
_register_label("‚ö° Fast", "‚ö° Fast ‚úÖ", prefix=True)
_register_label("üíé Quality", "üíé Quality ‚úÖ", prefix=True)
_register_label("üñº –î–æ–±–∞–≤–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å", prefix=True)
_register_label("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", "üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë –≤–∏–¥–µ–æ", prefix=True)
_register_label("üöÄ –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Banana", prefix=True)
_register_label("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ñ–æ—Ç–æ")
_register_label("üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ")
_register_label("‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç")
_register_label("üìù –¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏")
_register_label("‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ")
_register_label("üé® –°—Ç–∏–ª—å")
_register_label("üéº –†–µ–∂–∏–º", prefix=True)
_register_label("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è", prefix=True)
_register_label("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
_register_label("üßæ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π")
_register_label("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞")
_register_label("üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
_register_label("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è")
_register_label("üõí –ì–¥–µ –∫—É–ø–∏—Ç—å Stars")
_register_label("üé¨", prefix=True)
_register_label("üé®", prefix=True)
_register_label("üéµ", prefix=True)
_register_label("üíé", prefix=True)
_register_label("üí¨", prefix=True)
_register_label("üß†", prefix=True)
_register_label("üß© Banana")
_register_label("üéµ Suno (—Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏)")

MENU_LABELS = tuple(sorted(_MENU_LABELS))

_LABEL_PATTERN_PARTS: list[str] = []
for value in sorted({_casefold(label) for label in LABEL_ALIASES}, key=len, reverse=True):
    escaped = re.escape(value)
    if value in _PREFIX_LABELS:
        pattern = rf"{escaped}(?:\s|$)"
    else:
        pattern = rf"^(?:{escaped})$"
    _LABEL_PATTERN_PARTS.append(pattern)

_COMMAND_PATTERN = r"/[a-z0-9_]+(?:@[a-z0-9_]+)?"
_LABEL_PATTERN_PARTS.append(_COMMAND_PATTERN)

COMMAND_OR_BUTTON_REGEX = re.compile("|".join(_LABEL_PATTERN_PARTS))

_PLACEHOLDER_PROMPTS = {
    "‚è≥ sending request‚Ä¶",
    "‚ö†Ô∏è generation failed, please try later.",
    "‚ö†Ô∏è generation failed, please try later. üíé —Ç–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.",
}


BUTTON_LABELS = set(MENU_LABELS)


def is_button_label(text: Optional[str]) -> bool:
    if not text:
        return False
    normalized = _casefold(text)
    if not normalized:
        return False
    if normalized in _EXACT_LABELS:
        return True
    for prefix in _PREFIX_LABELS:
        if normalized.startswith(prefix):
            return True
    return False


def is_command_text(text: Optional[str]) -> bool:
    if not text:
        return False
    stripped = text.strip()
    if not stripped:
        return False
    if stripped.startswith(COMMAND_PREFIX):
        return True
    normalized = _casefold(stripped)
    if normalized in _EXACT_LABELS:
        return True
    for prefix in _PREFIX_LABELS:
        if normalized.startswith(prefix):
            return True
    if COMMAND_OR_BUTTON_REGEX.search(normalized):
        return True
    return False


def should_capture_to_prompt(text: Optional[str]) -> bool:
    """–†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç (–Ω–µ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–µ –ª–µ–π–±–ª—ã)."""

    if not text:
        return False
    stripped = text.strip()
    if not stripped:
        return False
    if is_command_text(stripped):
        return False
    if is_button_label(stripped):
        return False
    if stripped.casefold() in _PLACEHOLDER_PROMPTS:
        return False
    return True


# –ø—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö edit
_last_edit_cache: dict[tuple[int, int], dict[str, Any]] = {}


def safe_edit(bot: Any, chat_id: int, message_id: int, text: str, **kwargs: Any):
    key = (int(chat_id), int(message_id))
    entry = _last_edit_cache.get(key)
    now = time()
    if entry and entry.get("text") == text and now - entry.get("ts", 0.0) < 30:
        return entry.get("result")

    try:
        result = bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, **kwargs)
    except BadRequest as exc:
        if "message is not modified" in str(exc).lower():
            _last_edit_cache[key] = {"text": text, "ts": now, "result": None}
            return None
        raise
    else:
        _last_edit_cache[key] = {"text": text, "ts": now, "result": result}
        return result


__all__ = [
    "COMMAND_PREFIX",
    "MENU_LABELS",
    "LABEL_ALIASES",
    "COMMAND_OR_BUTTON_REGEX",
    "BUTTON_LABELS",
    "is_command_text",
    "is_button_label",
    "should_capture_to_prompt",
    "safe_edit",
]

